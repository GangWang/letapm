// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Cmd.pb.h"

@implementation CmdRoot
static BatPBExtensionRegistry* extensionRegistry = nil;
+ (BatPBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CmdRoot class]) {
    BatPBMutableExtensionRegistry* registry = [BatPBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(BatPBMutableExtensionRegistry*) registry {
}
@end

BOOL CmdTypeIsValidValue(CmdType value) {
  switch (value) {
    case CmdTypeSession:
    case CmdTypeSessionreply:
    case CmdTypeRecvdatareply:
    case CmdTypeHttpData:
    case CmdTypeSocketConnect:
    case CmdTypeSocketSendrecvData:
    case CmdTypeWebviewData:
    case CmdTypeMethodData:
    case CmdTypeUpdateNetworkStatus:
    case CmdTypeMemoryWaring:
    case CmdTypeMainthreadAnr:
    case CmdTypeMetricData:
    case CmdTypeBatteryData:
    case CmdTypeFpsData:
    case CmdTypeFpsCalamityData:
      return YES;
    default:
      return NO;
  }
}
BOOL HttpErrorTypeIsValidValue(HttpErrorType value) {
  switch (value) {
    case HttpErrorTypeHttpErrorTypeHttp:
    case HttpErrorTypeHttpErrorTypeNetwork:
      return YES;
    default:
      return NO;
  }
}
BOOL MetricTypeIsValidValue(MetricType value) {
  switch (value) {
    case MetricTypeMetricNormal:
    case MetricTypeMetricDot:
    case MetricTypeMetricDotStart:
    case MetricTypeMetricDotEnd:
      return YES;
    default:
      return NO;
  }
}
@interface SessionMessage ()
@property (retain) NSString* appkey;
@property (retain) SessionMessage_AppInfo* app;
@property (retain) SessionMessage_DeviceInfo* device;
@property (retain) NSString* sessionId;
@property (retain) NSString* sdkVersion;
@end

@implementation SessionMessage

- (BOOL) hasAppkey {
  return !!hasAppkey_;
}
- (void) setHasAppkey:(BOOL) value {
  hasAppkey_ = !!value;
}
@synthesize appkey;
- (BOOL) hasApp {
  return !!hasApp_;
}
- (void) setHasApp:(BOOL) value {
  hasApp_ = !!value;
}
@synthesize app;
- (BOOL) hasDevice {
  return !!hasDevice_;
}
- (void) setHasDevice:(BOOL) value {
  hasDevice_ = !!value;
}
@synthesize device;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (BOOL) hasSdkVersion {
  return !!hasSdkVersion_;
}
- (void) setHasSdkVersion:(BOOL) value {
  hasSdkVersion_ = !!value;
}
@synthesize sdkVersion;
- (void) dealloc {
  self.appkey = nil;
  self.app = nil;
  self.device = nil;
  self.sessionId = nil;
  self.sdkVersion = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.appkey = @"";
    self.app = [SessionMessage_AppInfo defaultInstance];
    self.device = [SessionMessage_DeviceInfo defaultInstance];
    self.sessionId = @"";
    self.sdkVersion = @"";
  }
  return self;
}
static SessionMessage* defaultSessionMessageInstance = nil;
+ (void) initialize {
  if (self == [SessionMessage class]) {
    defaultSessionMessageInstance = [[SessionMessage alloc] init];
  }
}
+ (SessionMessage*) defaultInstance {
  return defaultSessionMessageInstance;
}
- (SessionMessage*) defaultInstance {
  return defaultSessionMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAppkey) {
    return NO;
  }
  if (!self.hasApp) {
    return NO;
  }
  if (!self.hasDevice) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasSdkVersion) {
    return NO;
  }
  if (!self.app.isInitialized) {
    return NO;
  }
  if (!self.device.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasAppkey) {
    [output writeString:1 value:self.appkey];
  }
  if (self.hasApp) {
    [output writeMessage:2 value:self.app];
  }
  if (self.hasDevice) {
    [output writeMessage:3 value:self.device];
  }
  if (self.hasSessionId) {
    [output writeString:4 value:self.sessionId];
  }
  if (self.hasSdkVersion) {
    [output writeString:5 value:self.sdkVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAppkey) {
    size += computeStringSize(1, self.appkey);
  }
  if (self.hasApp) {
    size += computeMessageSize(2, self.app);
  }
  if (self.hasDevice) {
    size += computeMessageSize(3, self.device);
  }
  if (self.hasSessionId) {
    size += computeStringSize(4, self.sessionId);
  }
  if (self.hasSdkVersion) {
    size += computeStringSize(5, self.sdkVersion);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SessionMessage*) parseFromData:(NSData*) data {
  return (SessionMessage*)[[[SessionMessage builder] mergeFromData:data] build];
}
+ (SessionMessage*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SessionMessage*)[[[SessionMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SessionMessage*) parseFromInputStream:(NSInputStream*) input {
  return (SessionMessage*)[[[SessionMessage builder] mergeFromInputStream:input] build];
}
+ (SessionMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SessionMessage*)[[[SessionMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionMessage*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (SessionMessage*)[[[SessionMessage builder] mergeFromCodedInputStream:input] build];
}
+ (SessionMessage*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SessionMessage*)[[[SessionMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionMessage_Builder*) builder {
  return [[[SessionMessage_Builder alloc] init] autorelease];
}
+ (SessionMessage_Builder*) builderWithPrototype:(SessionMessage*) prototype {
  return [[SessionMessage builder] mergeFrom:prototype];
}
- (SessionMessage_Builder*) builder {
  return [SessionMessage builder];
}
@end

@interface SessionMessage_AppInfo ()
@property (retain) NSString* name;
@property (retain) NSString* packageId;
@property (retain) NSString* appVersion;
@end

@implementation SessionMessage_AppInfo

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasPackageId {
  return !!hasPackageId_;
}
- (void) setHasPackageId:(BOOL) value {
  hasPackageId_ = !!value;
}
@synthesize packageId;
- (BOOL) hasAppVersion {
  return !!hasAppVersion_;
}
- (void) setHasAppVersion:(BOOL) value {
  hasAppVersion_ = !!value;
}
@synthesize appVersion;
- (void) dealloc {
  self.name = nil;
  self.packageId = nil;
  self.appVersion = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.packageId = @"";
    self.appVersion = @"";
  }
  return self;
}
static SessionMessage_AppInfo* defaultSessionMessage_AppInfoInstance = nil;
+ (void) initialize {
  if (self == [SessionMessage_AppInfo class]) {
    defaultSessionMessage_AppInfoInstance = [[SessionMessage_AppInfo alloc] init];
  }
}
+ (SessionMessage_AppInfo*) defaultInstance {
  return defaultSessionMessage_AppInfoInstance;
}
- (SessionMessage_AppInfo*) defaultInstance {
  return defaultSessionMessage_AppInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasPackageId) {
    return NO;
  }
  if (!self.hasAppVersion) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasPackageId) {
    [output writeString:2 value:self.packageId];
  }
  if (self.hasAppVersion) {
    [output writeString:3 value:self.appVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasPackageId) {
    size += computeStringSize(2, self.packageId);
  }
  if (self.hasAppVersion) {
    size += computeStringSize(3, self.appVersion);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SessionMessage_AppInfo*) parseFromData:(NSData*) data {
  return (SessionMessage_AppInfo*)[[[SessionMessage_AppInfo builder] mergeFromData:data] build];
}
+ (SessionMessage_AppInfo*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SessionMessage_AppInfo*)[[[SessionMessage_AppInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SessionMessage_AppInfo*) parseFromInputStream:(NSInputStream*) input {
  return (SessionMessage_AppInfo*)[[[SessionMessage_AppInfo builder] mergeFromInputStream:input] build];
}
+ (SessionMessage_AppInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SessionMessage_AppInfo*)[[[SessionMessage_AppInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionMessage_AppInfo*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (SessionMessage_AppInfo*)[[[SessionMessage_AppInfo builder] mergeFromCodedInputStream:input] build];
}
+ (SessionMessage_AppInfo*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SessionMessage_AppInfo*)[[[SessionMessage_AppInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionMessage_AppInfo_Builder*) builder {
  return [[[SessionMessage_AppInfo_Builder alloc] init] autorelease];
}
+ (SessionMessage_AppInfo_Builder*) builderWithPrototype:(SessionMessage_AppInfo*) prototype {
  return [[SessionMessage_AppInfo builder] mergeFrom:prototype];
}
- (SessionMessage_AppInfo_Builder*) builder {
  return [SessionMessage_AppInfo builder];
}
@end

@interface SessionMessage_AppInfo_Builder()
@property (retain) SessionMessage_AppInfo* result;
@end

@implementation SessionMessage_AppInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SessionMessage_AppInfo alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (SessionMessage_AppInfo_Builder*) clear {
  self.result = [[[SessionMessage_AppInfo alloc] init] autorelease];
  return self;
}
- (SessionMessage_AppInfo_Builder*) clone {
  return [SessionMessage_AppInfo builderWithPrototype:result];
}
- (SessionMessage_AppInfo*) defaultInstance {
  return [SessionMessage_AppInfo defaultInstance];
}
- (SessionMessage_AppInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SessionMessage_AppInfo*) buildPartial {
  SessionMessage_AppInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SessionMessage_AppInfo_Builder*) mergeFrom:(SessionMessage_AppInfo*) other {
  if (other == [SessionMessage_AppInfo defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasPackageId) {
    [self setPackageId:other.packageId];
  }
  if (other.hasAppVersion) {
    [self setAppVersion:other.appVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SessionMessage_AppInfo_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (SessionMessage_AppInfo_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setPackageId:[input readString]];
        break;
      }
      case 26: {
        [self setAppVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (SessionMessage_AppInfo_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (SessionMessage_AppInfo_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasPackageId {
  return result.hasPackageId;
}
- (NSString*) packageId {
  return result.packageId;
}
- (SessionMessage_AppInfo_Builder*) setPackageId:(NSString*) value {
  result.hasPackageId = YES;
  result.packageId = value;
  return self;
}
- (SessionMessage_AppInfo_Builder*) clearPackageId {
  result.hasPackageId = NO;
  result.packageId = @"";
  return self;
}
- (BOOL) hasAppVersion {
  return result.hasAppVersion;
}
- (NSString*) appVersion {
  return result.appVersion;
}
- (SessionMessage_AppInfo_Builder*) setAppVersion:(NSString*) value {
  result.hasAppVersion = YES;
  result.appVersion = value;
  return self;
}
- (SessionMessage_AppInfo_Builder*) clearAppVersion {
  result.hasAppVersion = NO;
  result.appVersion = @"";
  return self;
}
@end

@interface SessionMessage_DeviceInfo ()
@property (retain) NSString* deviceName;
@property (retain) NSString* osName;
@property (retain) NSString* osVersion;
@property (retain) NSString* screenSize;
@property (retain) NSString* deviceId;
@property BOOL rooted;
@property (retain) NSString* deviceCode;
@end

@implementation SessionMessage_DeviceInfo

- (BOOL) hasDeviceName {
  return !!hasDeviceName_;
}
- (void) setHasDeviceName:(BOOL) value {
  hasDeviceName_ = !!value;
}
@synthesize deviceName;
- (BOOL) hasOsName {
  return !!hasOsName_;
}
- (void) setHasOsName:(BOOL) value {
  hasOsName_ = !!value;
}
@synthesize osName;
- (BOOL) hasOsVersion {
  return !!hasOsVersion_;
}
- (void) setHasOsVersion:(BOOL) value {
  hasOsVersion_ = !!value;
}
@synthesize osVersion;
- (BOOL) hasScreenSize {
  return !!hasScreenSize_;
}
- (void) setHasScreenSize:(BOOL) value {
  hasScreenSize_ = !!value;
}
@synthesize screenSize;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) value {
  hasDeviceId_ = !!value;
}
@synthesize deviceId;
- (BOOL) hasRooted {
  return !!hasRooted_;
}
- (void) setHasRooted:(BOOL) value {
  hasRooted_ = !!value;
}
- (BOOL) rooted {
  return !!rooted_;
}
- (void) setRooted:(BOOL) value {
  rooted_ = !!value;
}
- (BOOL) hasDeviceCode {
  return !!hasDeviceCode_;
}
- (void) setHasDeviceCode:(BOOL) value {
  hasDeviceCode_ = !!value;
}
@synthesize deviceCode;
- (void) dealloc {
  self.deviceName = nil;
  self.osName = nil;
  self.osVersion = nil;
  self.screenSize = nil;
  self.deviceId = nil;
  self.deviceCode = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.deviceName = @"";
    self.osName = @"";
    self.osVersion = @"";
    self.screenSize = @"";
    self.deviceId = @"";
    self.rooted = NO;
    self.deviceCode = @"";
  }
  return self;
}
static SessionMessage_DeviceInfo* defaultSessionMessage_DeviceInfoInstance = nil;
+ (void) initialize {
  if (self == [SessionMessage_DeviceInfo class]) {
    defaultSessionMessage_DeviceInfoInstance = [[SessionMessage_DeviceInfo alloc] init];
  }
}
+ (SessionMessage_DeviceInfo*) defaultInstance {
  return defaultSessionMessage_DeviceInfoInstance;
}
- (SessionMessage_DeviceInfo*) defaultInstance {
  return defaultSessionMessage_DeviceInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDeviceName) {
    return NO;
  }
  if (!self.hasOsName) {
    return NO;
  }
  if (!self.hasOsVersion) {
    return NO;
  }
  if (!self.hasScreenSize) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasRooted) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasDeviceName) {
    [output writeString:1 value:self.deviceName];
  }
  if (self.hasOsName) {
    [output writeString:2 value:self.osName];
  }
  if (self.hasOsVersion) {
    [output writeString:3 value:self.osVersion];
  }
  if (self.hasScreenSize) {
    [output writeString:4 value:self.screenSize];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasRooted) {
    [output writeBool:6 value:self.rooted];
  }
  if (self.hasDeviceCode) {
    [output writeString:7 value:self.deviceCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDeviceName) {
    size += computeStringSize(1, self.deviceName);
  }
  if (self.hasOsName) {
    size += computeStringSize(2, self.osName);
  }
  if (self.hasOsVersion) {
    size += computeStringSize(3, self.osVersion);
  }
  if (self.hasScreenSize) {
    size += computeStringSize(4, self.screenSize);
  }
  if (self.hasDeviceId) {
    size += computeStringSize(5, self.deviceId);
  }
  if (self.hasRooted) {
    size += computeBoolSize(6, self.rooted);
  }
  if (self.hasDeviceCode) {
    size += computeStringSize(7, self.deviceCode);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SessionMessage_DeviceInfo*) parseFromData:(NSData*) data {
  return (SessionMessage_DeviceInfo*)[[[SessionMessage_DeviceInfo builder] mergeFromData:data] build];
}
+ (SessionMessage_DeviceInfo*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SessionMessage_DeviceInfo*)[[[SessionMessage_DeviceInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SessionMessage_DeviceInfo*) parseFromInputStream:(NSInputStream*) input {
  return (SessionMessage_DeviceInfo*)[[[SessionMessage_DeviceInfo builder] mergeFromInputStream:input] build];
}
+ (SessionMessage_DeviceInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SessionMessage_DeviceInfo*)[[[SessionMessage_DeviceInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionMessage_DeviceInfo*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (SessionMessage_DeviceInfo*)[[[SessionMessage_DeviceInfo builder] mergeFromCodedInputStream:input] build];
}
+ (SessionMessage_DeviceInfo*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SessionMessage_DeviceInfo*)[[[SessionMessage_DeviceInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionMessage_DeviceInfo_Builder*) builder {
  return [[[SessionMessage_DeviceInfo_Builder alloc] init] autorelease];
}
+ (SessionMessage_DeviceInfo_Builder*) builderWithPrototype:(SessionMessage_DeviceInfo*) prototype {
  return [[SessionMessage_DeviceInfo builder] mergeFrom:prototype];
}
- (SessionMessage_DeviceInfo_Builder*) builder {
  return [SessionMessage_DeviceInfo builder];
}
@end

@interface SessionMessage_DeviceInfo_Builder()
@property (retain) SessionMessage_DeviceInfo* result;
@end

@implementation SessionMessage_DeviceInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SessionMessage_DeviceInfo alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (SessionMessage_DeviceInfo_Builder*) clear {
  self.result = [[[SessionMessage_DeviceInfo alloc] init] autorelease];
  return self;
}
- (SessionMessage_DeviceInfo_Builder*) clone {
  return [SessionMessage_DeviceInfo builderWithPrototype:result];
}
- (SessionMessage_DeviceInfo*) defaultInstance {
  return [SessionMessage_DeviceInfo defaultInstance];
}
- (SessionMessage_DeviceInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SessionMessage_DeviceInfo*) buildPartial {
  SessionMessage_DeviceInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SessionMessage_DeviceInfo_Builder*) mergeFrom:(SessionMessage_DeviceInfo*) other {
  if (other == [SessionMessage_DeviceInfo defaultInstance]) {
    return self;
  }
  if (other.hasDeviceName) {
    [self setDeviceName:other.deviceName];
  }
  if (other.hasOsName) {
    [self setOsName:other.osName];
  }
  if (other.hasOsVersion) {
    [self setOsVersion:other.osVersion];
  }
  if (other.hasScreenSize) {
    [self setScreenSize:other.screenSize];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasRooted) {
    [self setRooted:other.rooted];
  }
  if (other.hasDeviceCode) {
    [self setDeviceCode:other.deviceCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SessionMessage_DeviceInfo_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (SessionMessage_DeviceInfo_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDeviceName:[input readString]];
        break;
      }
      case 18: {
        [self setOsName:[input readString]];
        break;
      }
      case 26: {
        [self setOsVersion:[input readString]];
        break;
      }
      case 34: {
        [self setScreenSize:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 48: {
        [self setRooted:[input readBool]];
        break;
      }
      case 58: {
        [self setDeviceCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDeviceName {
  return result.hasDeviceName;
}
- (NSString*) deviceName {
  return result.deviceName;
}
- (SessionMessage_DeviceInfo_Builder*) setDeviceName:(NSString*) value {
  result.hasDeviceName = YES;
  result.deviceName = value;
  return self;
}
- (SessionMessage_DeviceInfo_Builder*) clearDeviceName {
  result.hasDeviceName = NO;
  result.deviceName = @"";
  return self;
}
- (BOOL) hasOsName {
  return result.hasOsName;
}
- (NSString*) osName {
  return result.osName;
}
- (SessionMessage_DeviceInfo_Builder*) setOsName:(NSString*) value {
  result.hasOsName = YES;
  result.osName = value;
  return self;
}
- (SessionMessage_DeviceInfo_Builder*) clearOsName {
  result.hasOsName = NO;
  result.osName = @"";
  return self;
}
- (BOOL) hasOsVersion {
  return result.hasOsVersion;
}
- (NSString*) osVersion {
  return result.osVersion;
}
- (SessionMessage_DeviceInfo_Builder*) setOsVersion:(NSString*) value {
  result.hasOsVersion = YES;
  result.osVersion = value;
  return self;
}
- (SessionMessage_DeviceInfo_Builder*) clearOsVersion {
  result.hasOsVersion = NO;
  result.osVersion = @"";
  return self;
}
- (BOOL) hasScreenSize {
  return result.hasScreenSize;
}
- (NSString*) screenSize {
  return result.screenSize;
}
- (SessionMessage_DeviceInfo_Builder*) setScreenSize:(NSString*) value {
  result.hasScreenSize = YES;
  result.screenSize = value;
  return self;
}
- (SessionMessage_DeviceInfo_Builder*) clearScreenSize {
  result.hasScreenSize = NO;
  result.screenSize = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return result.hasDeviceId;
}
- (NSString*) deviceId {
  return result.deviceId;
}
- (SessionMessage_DeviceInfo_Builder*) setDeviceId:(NSString*) value {
  result.hasDeviceId = YES;
  result.deviceId = value;
  return self;
}
- (SessionMessage_DeviceInfo_Builder*) clearDeviceId {
  result.hasDeviceId = NO;
  result.deviceId = @"";
  return self;
}
- (BOOL) hasRooted {
  return result.hasRooted;
}
- (BOOL) rooted {
  return result.rooted;
}
- (SessionMessage_DeviceInfo_Builder*) setRooted:(BOOL) value {
  result.hasRooted = YES;
  result.rooted = value;
  return self;
}
- (SessionMessage_DeviceInfo_Builder*) clearRooted {
  result.hasRooted = NO;
  result.rooted = NO;
  return self;
}
- (BOOL) hasDeviceCode {
  return result.hasDeviceCode;
}
- (NSString*) deviceCode {
  return result.deviceCode;
}
- (SessionMessage_DeviceInfo_Builder*) setDeviceCode:(NSString*) value {
  result.hasDeviceCode = YES;
  result.deviceCode = value;
  return self;
}
- (SessionMessage_DeviceInfo_Builder*) clearDeviceCode {
  result.hasDeviceCode = NO;
  result.deviceCode = @"";
  return self;
}
@end

@interface SessionMessage_Builder()
@property (retain) SessionMessage* result;
@end

@implementation SessionMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SessionMessage alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (SessionMessage_Builder*) clear {
  self.result = [[[SessionMessage alloc] init] autorelease];
  return self;
}
- (SessionMessage_Builder*) clone {
  return [SessionMessage builderWithPrototype:result];
}
- (SessionMessage*) defaultInstance {
  return [SessionMessage defaultInstance];
}
- (SessionMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SessionMessage*) buildPartial {
  SessionMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SessionMessage_Builder*) mergeFrom:(SessionMessage*) other {
  if (other == [SessionMessage defaultInstance]) {
    return self;
  }
  if (other.hasAppkey) {
    [self setAppkey:other.appkey];
  }
  if (other.hasApp) {
    [self mergeApp:other.app];
  }
  if (other.hasDevice) {
    [self mergeDevice:other.device];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasSdkVersion) {
    [self setSdkVersion:other.sdkVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SessionMessage_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (SessionMessage_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAppkey:[input readString]];
        break;
      }
      case 18: {
        SessionMessage_AppInfo_Builder* subBuilder = [SessionMessage_AppInfo builder];
        if (self.hasApp) {
          [subBuilder mergeFrom:self.app];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setApp:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        SessionMessage_DeviceInfo_Builder* subBuilder = [SessionMessage_DeviceInfo builder];
        if (self.hasDevice) {
          [subBuilder mergeFrom:self.device];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDevice:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setSessionId:[input readString]];
        break;
      }
      case 42: {
        [self setSdkVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAppkey {
  return result.hasAppkey;
}
- (NSString*) appkey {
  return result.appkey;
}
- (SessionMessage_Builder*) setAppkey:(NSString*) value {
  result.hasAppkey = YES;
  result.appkey = value;
  return self;
}
- (SessionMessage_Builder*) clearAppkey {
  result.hasAppkey = NO;
  result.appkey = @"";
  return self;
}
- (BOOL) hasApp {
  return result.hasApp;
}
- (SessionMessage_AppInfo*) app {
  return result.app;
}
- (SessionMessage_Builder*) setApp:(SessionMessage_AppInfo*) value {
  result.hasApp = YES;
  result.app = value;
  return self;
}
- (SessionMessage_Builder*) setAppBuilder:(SessionMessage_AppInfo_Builder*) builderForValue {
  return [self setApp:[builderForValue build]];
}
- (SessionMessage_Builder*) mergeApp:(SessionMessage_AppInfo*) value {
  if (result.hasApp &&
      result.app != [SessionMessage_AppInfo defaultInstance]) {
    result.app =
      [[[SessionMessage_AppInfo builderWithPrototype:result.app] mergeFrom:value] buildPartial];
  } else {
    result.app = value;
  }
  result.hasApp = YES;
  return self;
}
- (SessionMessage_Builder*) clearApp {
  result.hasApp = NO;
  result.app = [SessionMessage_AppInfo defaultInstance];
  return self;
}
- (BOOL) hasDevice {
  return result.hasDevice;
}
- (SessionMessage_DeviceInfo*) device {
  return result.device;
}
- (SessionMessage_Builder*) setDevice:(SessionMessage_DeviceInfo*) value {
  result.hasDevice = YES;
  result.device = value;
  return self;
}
- (SessionMessage_Builder*) setDeviceBuilder:(SessionMessage_DeviceInfo_Builder*) builderForValue {
  return [self setDevice:[builderForValue build]];
}
- (SessionMessage_Builder*) mergeDevice:(SessionMessage_DeviceInfo*) value {
  if (result.hasDevice &&
      result.device != [SessionMessage_DeviceInfo defaultInstance]) {
    result.device =
      [[[SessionMessage_DeviceInfo builderWithPrototype:result.device] mergeFrom:value] buildPartial];
  } else {
    result.device = value;
  }
  result.hasDevice = YES;
  return self;
}
- (SessionMessage_Builder*) clearDevice {
  result.hasDevice = NO;
  result.device = [SessionMessage_DeviceInfo defaultInstance];
  return self;
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (NSString*) sessionId {
  return result.sessionId;
}
- (SessionMessage_Builder*) setSessionId:(NSString*) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (SessionMessage_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = @"";
  return self;
}
- (BOOL) hasSdkVersion {
  return result.hasSdkVersion;
}
- (NSString*) sdkVersion {
  return result.sdkVersion;
}
- (SessionMessage_Builder*) setSdkVersion:(NSString*) value {
  result.hasSdkVersion = YES;
  result.sdkVersion = value;
  return self;
}
- (SessionMessage_Builder*) clearSdkVersion {
  result.hasSdkVersion = NO;
  result.sdkVersion = @"";
  return self;
}
@end

@interface MessageReply ()
@property BOOL ret;
@property int32_t probability;
@property (retain) NSString* message;
@end

@implementation MessageReply

- (BOOL) hasRet {
  return !!hasRet_;
}
- (void) setHasRet:(BOOL) value {
  hasRet_ = !!value;
}
- (BOOL) ret {
  return !!ret_;
}
- (void) setRet:(BOOL) value {
  ret_ = !!value;
}
- (BOOL) hasProbability {
  return !!hasProbability_;
}
- (void) setHasProbability:(BOOL) value {
  hasProbability_ = !!value;
}
@synthesize probability;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) value {
  hasMessage_ = !!value;
}
@synthesize message;
- (void) dealloc {
  self.message = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.ret = NO;
    self.probability = 0;
    self.message = @"";
  }
  return self;
}
static MessageReply* defaultMessageReplyInstance = nil;
+ (void) initialize {
  if (self == [MessageReply class]) {
    defaultMessageReplyInstance = [[MessageReply alloc] init];
  }
}
+ (MessageReply*) defaultInstance {
  return defaultMessageReplyInstance;
}
- (MessageReply*) defaultInstance {
  return defaultMessageReplyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRet) {
    return NO;
  }
  if (!self.hasProbability) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasRet) {
    [output writeBool:1 value:self.ret];
  }
  if (self.hasProbability) {
    [output writeInt32:2 value:self.probability];
  }
  if (self.hasMessage) {
    [output writeString:3 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRet) {
    size += computeBoolSize(1, self.ret);
  }
  if (self.hasProbability) {
    size += computeInt32Size(2, self.probability);
  }
  if (self.hasMessage) {
    size += computeStringSize(3, self.message);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MessageReply*) parseFromData:(NSData*) data {
  return (MessageReply*)[[[MessageReply builder] mergeFromData:data] build];
}
+ (MessageReply*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MessageReply*)[[[MessageReply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MessageReply*) parseFromInputStream:(NSInputStream*) input {
  return (MessageReply*)[[[MessageReply builder] mergeFromInputStream:input] build];
}
+ (MessageReply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MessageReply*)[[[MessageReply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MessageReply*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (MessageReply*)[[[MessageReply builder] mergeFromCodedInputStream:input] build];
}
+ (MessageReply*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MessageReply*)[[[MessageReply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MessageReply_Builder*) builder {
  return [[[MessageReply_Builder alloc] init] autorelease];
}
+ (MessageReply_Builder*) builderWithPrototype:(MessageReply*) prototype {
  return [[MessageReply builder] mergeFrom:prototype];
}
- (MessageReply_Builder*) builder {
  return [MessageReply builder];
}
@end

@interface MessageReply_Builder()
@property (retain) MessageReply* result;
@end

@implementation MessageReply_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MessageReply alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (MessageReply_Builder*) clear {
  self.result = [[[MessageReply alloc] init] autorelease];
  return self;
}
- (MessageReply_Builder*) clone {
  return [MessageReply builderWithPrototype:result];
}
- (MessageReply*) defaultInstance {
  return [MessageReply defaultInstance];
}
- (MessageReply*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MessageReply*) buildPartial {
  MessageReply* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MessageReply_Builder*) mergeFrom:(MessageReply*) other {
  if (other == [MessageReply defaultInstance]) {
    return self;
  }
  if (other.hasRet) {
    [self setRet:other.ret];
  }
  if (other.hasProbability) {
    [self setProbability:other.probability];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MessageReply_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (MessageReply_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRet:[input readBool]];
        break;
      }
      case 16: {
        [self setProbability:[input readInt32]];
        break;
      }
      case 26: {
        [self setMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRet {
  return result.hasRet;
}
- (BOOL) ret {
  return result.ret;
}
- (MessageReply_Builder*) setRet:(BOOL) value {
  result.hasRet = YES;
  result.ret = value;
  return self;
}
- (MessageReply_Builder*) clearRet {
  result.hasRet = NO;
  result.ret = NO;
  return self;
}
- (BOOL) hasProbability {
  return result.hasProbability;
}
- (int32_t) probability {
  return result.probability;
}
- (MessageReply_Builder*) setProbability:(int32_t) value {
  result.hasProbability = YES;
  result.probability = value;
  return self;
}
- (MessageReply_Builder*) clearProbability {
  result.hasProbability = NO;
  result.probability = 0;
  return self;
}
- (BOOL) hasMessage {
  return result.hasMessage;
}
- (NSString*) message {
  return result.message;
}
- (MessageReply_Builder*) setMessage:(NSString*) value {
  result.hasMessage = YES;
  result.message = value;
  return self;
}
- (MessageReply_Builder*) clearMessage {
  result.hasMessage = NO;
  result.message = @"";
  return self;
}
@end

@interface RecvDataReply ()
@property BOOL recved;
@property (retain) NSString* message;
@end

@implementation RecvDataReply

- (BOOL) hasRecved {
  return !!hasRecved_;
}
- (void) setHasRecved:(BOOL) value {
  hasRecved_ = !!value;
}
- (BOOL) recved {
  return !!recved_;
}
- (void) setRecved:(BOOL) value {
  recved_ = !!value;
}
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) value {
  hasMessage_ = !!value;
}
@synthesize message;
- (void) dealloc {
  self.message = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.recved = NO;
    self.message = @"";
  }
  return self;
}
static RecvDataReply* defaultRecvDataReplyInstance = nil;
+ (void) initialize {
  if (self == [RecvDataReply class]) {
    defaultRecvDataReplyInstance = [[RecvDataReply alloc] init];
  }
}
+ (RecvDataReply*) defaultInstance {
  return defaultRecvDataReplyInstance;
}
- (RecvDataReply*) defaultInstance {
  return defaultRecvDataReplyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRecved) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasRecved) {
    [output writeBool:1 value:self.recved];
  }
  if (self.hasMessage) {
    [output writeString:3 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRecved) {
    size += computeBoolSize(1, self.recved);
  }
  if (self.hasMessage) {
    size += computeStringSize(3, self.message);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RecvDataReply*) parseFromData:(NSData*) data {
  return (RecvDataReply*)[[[RecvDataReply builder] mergeFromData:data] build];
}
+ (RecvDataReply*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (RecvDataReply*)[[[RecvDataReply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RecvDataReply*) parseFromInputStream:(NSInputStream*) input {
  return (RecvDataReply*)[[[RecvDataReply builder] mergeFromInputStream:input] build];
}
+ (RecvDataReply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (RecvDataReply*)[[[RecvDataReply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RecvDataReply*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (RecvDataReply*)[[[RecvDataReply builder] mergeFromCodedInputStream:input] build];
}
+ (RecvDataReply*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (RecvDataReply*)[[[RecvDataReply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RecvDataReply_Builder*) builder {
  return [[[RecvDataReply_Builder alloc] init] autorelease];
}
+ (RecvDataReply_Builder*) builderWithPrototype:(RecvDataReply*) prototype {
  return [[RecvDataReply builder] mergeFrom:prototype];
}
- (RecvDataReply_Builder*) builder {
  return [RecvDataReply builder];
}
@end

@interface RecvDataReply_Builder()
@property (retain) RecvDataReply* result;
@end

@implementation RecvDataReply_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RecvDataReply alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (RecvDataReply_Builder*) clear {
  self.result = [[[RecvDataReply alloc] init] autorelease];
  return self;
}
- (RecvDataReply_Builder*) clone {
  return [RecvDataReply builderWithPrototype:result];
}
- (RecvDataReply*) defaultInstance {
  return [RecvDataReply defaultInstance];
}
- (RecvDataReply*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RecvDataReply*) buildPartial {
  RecvDataReply* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RecvDataReply_Builder*) mergeFrom:(RecvDataReply*) other {
  if (other == [RecvDataReply defaultInstance]) {
    return self;
  }
  if (other.hasRecved) {
    [self setRecved:other.recved];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RecvDataReply_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (RecvDataReply_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRecved:[input readBool]];
        break;
      }
      case 26: {
        [self setMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRecved {
  return result.hasRecved;
}
- (BOOL) recved {
  return result.recved;
}
- (RecvDataReply_Builder*) setRecved:(BOOL) value {
  result.hasRecved = YES;
  result.recved = value;
  return self;
}
- (RecvDataReply_Builder*) clearRecved {
  result.hasRecved = NO;
  result.recved = NO;
  return self;
}
- (BOOL) hasMessage {
  return result.hasMessage;
}
- (NSString*) message {
  return result.message;
}
- (RecvDataReply_Builder*) setMessage:(NSString*) value {
  result.hasMessage = YES;
  result.message = value;
  return self;
}
- (RecvDataReply_Builder*) clearMessage {
  result.hasMessage = NO;
  result.message = @"";
  return self;
}
@end

@interface AppNetWorkStatus ()
@property (retain) NSString* networkName;
@property (retain) NSString* carrierName;
@end

@implementation AppNetWorkStatus

- (BOOL) hasNetworkName {
  return !!hasNetworkName_;
}
- (void) setHasNetworkName:(BOOL) value {
  hasNetworkName_ = !!value;
}
@synthesize networkName;
- (BOOL) hasCarrierName {
  return !!hasCarrierName_;
}
- (void) setHasCarrierName:(BOOL) value {
  hasCarrierName_ = !!value;
}
@synthesize carrierName;
- (void) dealloc {
  self.networkName = nil;
  self.carrierName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.networkName = @"";
    self.carrierName = @"";
  }
  return self;
}
static AppNetWorkStatus* defaultAppNetWorkStatusInstance = nil;
+ (void) initialize {
  if (self == [AppNetWorkStatus class]) {
    defaultAppNetWorkStatusInstance = [[AppNetWorkStatus alloc] init];
  }
}
+ (AppNetWorkStatus*) defaultInstance {
  return defaultAppNetWorkStatusInstance;
}
- (AppNetWorkStatus*) defaultInstance {
  return defaultAppNetWorkStatusInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNetworkName) {
    return NO;
  }
  if (!self.hasCarrierName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasNetworkName) {
    [output writeString:1 value:self.networkName];
  }
  if (self.hasCarrierName) {
    [output writeString:2 value:self.carrierName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasNetworkName) {
    size += computeStringSize(1, self.networkName);
  }
  if (self.hasCarrierName) {
    size += computeStringSize(2, self.carrierName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AppNetWorkStatus*) parseFromData:(NSData*) data {
  return (AppNetWorkStatus*)[[[AppNetWorkStatus builder] mergeFromData:data] build];
}
+ (AppNetWorkStatus*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (AppNetWorkStatus*)[[[AppNetWorkStatus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppNetWorkStatus*) parseFromInputStream:(NSInputStream*) input {
  return (AppNetWorkStatus*)[[[AppNetWorkStatus builder] mergeFromInputStream:input] build];
}
+ (AppNetWorkStatus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (AppNetWorkStatus*)[[[AppNetWorkStatus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppNetWorkStatus*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (AppNetWorkStatus*)[[[AppNetWorkStatus builder] mergeFromCodedInputStream:input] build];
}
+ (AppNetWorkStatus*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (AppNetWorkStatus*)[[[AppNetWorkStatus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppNetWorkStatus_Builder*) builder {
  return [[[AppNetWorkStatus_Builder alloc] init] autorelease];
}
+ (AppNetWorkStatus_Builder*) builderWithPrototype:(AppNetWorkStatus*) prototype {
  return [[AppNetWorkStatus builder] mergeFrom:prototype];
}
- (AppNetWorkStatus_Builder*) builder {
  return [AppNetWorkStatus builder];
}
@end

@interface AppNetWorkStatus_Builder()
@property (retain) AppNetWorkStatus* result;
@end

@implementation AppNetWorkStatus_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AppNetWorkStatus alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (AppNetWorkStatus_Builder*) clear {
  self.result = [[[AppNetWorkStatus alloc] init] autorelease];
  return self;
}
- (AppNetWorkStatus_Builder*) clone {
  return [AppNetWorkStatus builderWithPrototype:result];
}
- (AppNetWorkStatus*) defaultInstance {
  return [AppNetWorkStatus defaultInstance];
}
- (AppNetWorkStatus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppNetWorkStatus*) buildPartial {
  AppNetWorkStatus* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AppNetWorkStatus_Builder*) mergeFrom:(AppNetWorkStatus*) other {
  if (other == [AppNetWorkStatus defaultInstance]) {
    return self;
  }
  if (other.hasNetworkName) {
    [self setNetworkName:other.networkName];
  }
  if (other.hasCarrierName) {
    [self setCarrierName:other.carrierName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppNetWorkStatus_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (AppNetWorkStatus_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setNetworkName:[input readString]];
        break;
      }
      case 18: {
        [self setCarrierName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasNetworkName {
  return result.hasNetworkName;
}
- (NSString*) networkName {
  return result.networkName;
}
- (AppNetWorkStatus_Builder*) setNetworkName:(NSString*) value {
  result.hasNetworkName = YES;
  result.networkName = value;
  return self;
}
- (AppNetWorkStatus_Builder*) clearNetworkName {
  result.hasNetworkName = NO;
  result.networkName = @"";
  return self;
}
- (BOOL) hasCarrierName {
  return result.hasCarrierName;
}
- (NSString*) carrierName {
  return result.carrierName;
}
- (AppNetWorkStatus_Builder*) setCarrierName:(NSString*) value {
  result.hasCarrierName = YES;
  result.carrierName = value;
  return self;
}
- (AppNetWorkStatus_Builder*) clearCarrierName {
  result.hasCarrierName = NO;
  result.carrierName = @"";
  return self;
}
@end

@interface HttpResponse ()
@property int32_t statusCode;
@property (retain) NSString* headerField;
@end

@implementation HttpResponse

- (BOOL) hasStatusCode {
  return !!hasStatusCode_;
}
- (void) setHasStatusCode:(BOOL) value {
  hasStatusCode_ = !!value;
}
@synthesize statusCode;
- (BOOL) hasHeaderField {
  return !!hasHeaderField_;
}
- (void) setHasHeaderField:(BOOL) value {
  hasHeaderField_ = !!value;
}
@synthesize headerField;
- (void) dealloc {
  self.headerField = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.statusCode = 0;
    self.headerField = @"";
  }
  return self;
}
static HttpResponse* defaultHttpResponseInstance = nil;
+ (void) initialize {
  if (self == [HttpResponse class]) {
    defaultHttpResponseInstance = [[HttpResponse alloc] init];
  }
}
+ (HttpResponse*) defaultInstance {
  return defaultHttpResponseInstance;
}
- (HttpResponse*) defaultInstance {
  return defaultHttpResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatusCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasStatusCode) {
    [output writeInt32:1 value:self.statusCode];
  }
  if (self.hasHeaderField) {
    [output writeString:2 value:self.headerField];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasStatusCode) {
    size += computeInt32Size(1, self.statusCode);
  }
  if (self.hasHeaderField) {
    size += computeStringSize(2, self.headerField);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (HttpResponse*) parseFromData:(NSData*) data {
  return (HttpResponse*)[[[HttpResponse builder] mergeFromData:data] build];
}
+ (HttpResponse*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (HttpResponse*)[[[HttpResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HttpResponse*) parseFromInputStream:(NSInputStream*) input {
  return (HttpResponse*)[[[HttpResponse builder] mergeFromInputStream:input] build];
}
+ (HttpResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (HttpResponse*)[[[HttpResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HttpResponse*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (HttpResponse*)[[[HttpResponse builder] mergeFromCodedInputStream:input] build];
}
+ (HttpResponse*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (HttpResponse*)[[[HttpResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HttpResponse_Builder*) builder {
  return [[[HttpResponse_Builder alloc] init] autorelease];
}
+ (HttpResponse_Builder*) builderWithPrototype:(HttpResponse*) prototype {
  return [[HttpResponse builder] mergeFrom:prototype];
}
- (HttpResponse_Builder*) builder {
  return [HttpResponse builder];
}
@end

@interface HttpResponse_Builder()
@property (retain) HttpResponse* result;
@end

@implementation HttpResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[HttpResponse alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (HttpResponse_Builder*) clear {
  self.result = [[[HttpResponse alloc] init] autorelease];
  return self;
}
- (HttpResponse_Builder*) clone {
  return [HttpResponse builderWithPrototype:result];
}
- (HttpResponse*) defaultInstance {
  return [HttpResponse defaultInstance];
}
- (HttpResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HttpResponse*) buildPartial {
  HttpResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (HttpResponse_Builder*) mergeFrom:(HttpResponse*) other {
  if (other == [HttpResponse defaultInstance]) {
    return self;
  }
  if (other.hasStatusCode) {
    [self setStatusCode:other.statusCode];
  }
  if (other.hasHeaderField) {
    [self setHeaderField:other.headerField];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HttpResponse_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (HttpResponse_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setStatusCode:[input readInt32]];
        break;
      }
      case 18: {
        [self setHeaderField:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasStatusCode {
  return result.hasStatusCode;
}
- (int32_t) statusCode {
  return result.statusCode;
}
- (HttpResponse_Builder*) setStatusCode:(int32_t) value {
  result.hasStatusCode = YES;
  result.statusCode = value;
  return self;
}
- (HttpResponse_Builder*) clearStatusCode {
  result.hasStatusCode = NO;
  result.statusCode = 0;
  return self;
}
- (BOOL) hasHeaderField {
  return result.hasHeaderField;
}
- (NSString*) headerField {
  return result.headerField;
}
- (HttpResponse_Builder*) setHeaderField:(NSString*) value {
  result.hasHeaderField = YES;
  result.headerField = value;
  return self;
}
- (HttpResponse_Builder*) clearHeaderField {
  result.hasHeaderField = NO;
  result.headerField = @"";
  return self;
}
@end

@interface HttpError ()
@property int32_t errorCode;
@property (retain) NSString* errorMessage;
@property HttpErrorType errorType;
@property (retain) NSString* responseContent;
@property (retain) NSString* headerField;
@end

@implementation HttpError

- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) value {
  hasErrorCode_ = !!value;
}
@synthesize errorCode;
- (BOOL) hasErrorMessage {
  return !!hasErrorMessage_;
}
- (void) setHasErrorMessage:(BOOL) value {
  hasErrorMessage_ = !!value;
}
@synthesize errorMessage;
- (BOOL) hasErrorType {
  return !!hasErrorType_;
}
- (void) setHasErrorType:(BOOL) value {
  hasErrorType_ = !!value;
}
@synthesize errorType;
- (BOOL) hasResponseContent {
  return !!hasResponseContent_;
}
- (void) setHasResponseContent:(BOOL) value {
  hasResponseContent_ = !!value;
}
@synthesize responseContent;
- (BOOL) hasHeaderField {
  return !!hasHeaderField_;
}
- (void) setHasHeaderField:(BOOL) value {
  hasHeaderField_ = !!value;
}
@synthesize headerField;
- (void) dealloc {
  self.errorMessage = nil;
  self.responseContent = nil;
  self.headerField = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.errorCode = 0;
    self.errorMessage = @"";
    self.errorType = HttpErrorTypeHttpErrorTypeHttp;
    self.responseContent = @"";
    self.headerField = @"";
  }
  return self;
}
static HttpError* defaultHttpErrorInstance = nil;
+ (void) initialize {
  if (self == [HttpError class]) {
    defaultHttpErrorInstance = [[HttpError alloc] init];
  }
}
+ (HttpError*) defaultInstance {
  return defaultHttpErrorInstance;
}
- (HttpError*) defaultInstance {
  return defaultHttpErrorInstance;
}
- (BOOL) isInitialized {
  if (!self.hasErrorCode) {
    return NO;
  }
  if (!self.hasErrorMessage) {
    return NO;
  }
  if (!self.hasErrorType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasErrorCode) {
    [output writeInt32:1 value:self.errorCode];
  }
  if (self.hasErrorMessage) {
    [output writeString:2 value:self.errorMessage];
  }
  if (self.hasErrorType) {
    [output writeEnum:3 value:self.errorType];
  }
  if (self.hasResponseContent) {
    [output writeString:4 value:self.responseContent];
  }
  if (self.hasHeaderField) {
    [output writeString:5 value:self.headerField];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasErrorCode) {
    size += computeInt32Size(1, self.errorCode);
  }
  if (self.hasErrorMessage) {
    size += computeStringSize(2, self.errorMessage);
  }
  if (self.hasErrorType) {
    size += computeEnumSize(3, self.errorType);
  }
  if (self.hasResponseContent) {
    size += computeStringSize(4, self.responseContent);
  }
  if (self.hasHeaderField) {
    size += computeStringSize(5, self.headerField);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (HttpError*) parseFromData:(NSData*) data {
  return (HttpError*)[[[HttpError builder] mergeFromData:data] build];
}
+ (HttpError*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (HttpError*)[[[HttpError builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HttpError*) parseFromInputStream:(NSInputStream*) input {
  return (HttpError*)[[[HttpError builder] mergeFromInputStream:input] build];
}
+ (HttpError*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (HttpError*)[[[HttpError builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HttpError*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (HttpError*)[[[HttpError builder] mergeFromCodedInputStream:input] build];
}
+ (HttpError*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (HttpError*)[[[HttpError builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HttpError_Builder*) builder {
  return [[[HttpError_Builder alloc] init] autorelease];
}
+ (HttpError_Builder*) builderWithPrototype:(HttpError*) prototype {
  return [[HttpError builder] mergeFrom:prototype];
}
- (HttpError_Builder*) builder {
  return [HttpError builder];
}
@end

@interface HttpError_Builder()
@property (retain) HttpError* result;
@end

@implementation HttpError_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[HttpError alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (HttpError_Builder*) clear {
  self.result = [[[HttpError alloc] init] autorelease];
  return self;
}
- (HttpError_Builder*) clone {
  return [HttpError builderWithPrototype:result];
}
- (HttpError*) defaultInstance {
  return [HttpError defaultInstance];
}
- (HttpError*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HttpError*) buildPartial {
  HttpError* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (HttpError_Builder*) mergeFrom:(HttpError*) other {
  if (other == [HttpError defaultInstance]) {
    return self;
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasErrorMessage) {
    [self setErrorMessage:other.errorMessage];
  }
  if (other.hasErrorType) {
    [self setErrorType:other.errorType];
  }
  if (other.hasResponseContent) {
    [self setResponseContent:other.responseContent];
  }
  if (other.hasHeaderField) {
    [self setHeaderField:other.headerField];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HttpError_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (HttpError_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setErrorCode:[input readInt32]];
        break;
      }
      case 18: {
        [self setErrorMessage:[input readString]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (HttpErrorTypeIsValidValue(value)) {
          [self setErrorType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        [self setResponseContent:[input readString]];
        break;
      }
      case 42: {
        [self setHeaderField:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasErrorCode {
  return result.hasErrorCode;
}
- (int32_t) errorCode {
  return result.errorCode;
}
- (HttpError_Builder*) setErrorCode:(int32_t) value {
  result.hasErrorCode = YES;
  result.errorCode = value;
  return self;
}
- (HttpError_Builder*) clearErrorCode {
  result.hasErrorCode = NO;
  result.errorCode = 0;
  return self;
}
- (BOOL) hasErrorMessage {
  return result.hasErrorMessage;
}
- (NSString*) errorMessage {
  return result.errorMessage;
}
- (HttpError_Builder*) setErrorMessage:(NSString*) value {
  result.hasErrorMessage = YES;
  result.errorMessage = value;
  return self;
}
- (HttpError_Builder*) clearErrorMessage {
  result.hasErrorMessage = NO;
  result.errorMessage = @"";
  return self;
}
- (BOOL) hasErrorType {
  return result.hasErrorType;
}
- (HttpErrorType) errorType {
  return result.errorType;
}
- (HttpError_Builder*) setErrorType:(HttpErrorType) value {
  result.hasErrorType = YES;
  result.errorType = value;
  return self;
}
- (HttpError_Builder*) clearErrorType {
  result.hasErrorType = NO;
  result.errorType = HttpErrorTypeHttpErrorTypeHttp;
  return self;
}
- (BOOL) hasResponseContent {
  return result.hasResponseContent;
}
- (NSString*) responseContent {
  return result.responseContent;
}
- (HttpError_Builder*) setResponseContent:(NSString*) value {
  result.hasResponseContent = YES;
  result.responseContent = value;
  return self;
}
- (HttpError_Builder*) clearResponseContent {
  result.hasResponseContent = NO;
  result.responseContent = @"";
  return self;
}
- (BOOL) hasHeaderField {
  return result.hasHeaderField;
}
- (NSString*) headerField {
  return result.headerField;
}
- (HttpError_Builder*) setHeaderField:(NSString*) value {
  result.hasHeaderField = YES;
  result.headerField = value;
  return self;
}
- (HttpError_Builder*) clearHeaderField {
  result.hasHeaderField = NO;
  result.headerField = @"";
  return self;
}
@end

@interface HttpData ()
@property (retain) NSString* url;
@property Float64 castTime;
@property (retain) HttpError* error;
@property int32_t responseSize;
@property int32_t requestSize;
@end

@implementation HttpData

- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value {
  hasUrl_ = !!value;
}
@synthesize url;
- (BOOL) hasCastTime {
  return !!hasCastTime_;
}
- (void) setHasCastTime:(BOOL) value {
  hasCastTime_ = !!value;
}
@synthesize castTime;
- (BOOL) hasError {
  return !!hasError_;
}
- (void) setHasError:(BOOL) value {
  hasError_ = !!value;
}
@synthesize error;
- (BOOL) hasResponseSize {
  return !!hasResponseSize_;
}
- (void) setHasResponseSize:(BOOL) value {
  hasResponseSize_ = !!value;
}
@synthesize responseSize;
- (BOOL) hasRequestSize {
  return !!hasRequestSize_;
}
- (void) setHasRequestSize:(BOOL) value {
  hasRequestSize_ = !!value;
}
@synthesize requestSize;
- (void) dealloc {
  self.url = nil;
  self.error = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.url = @"";
    self.castTime = 0;
    self.error = [HttpError defaultInstance];
    self.responseSize = 0;
    self.requestSize = 0;
  }
  return self;
}
static HttpData* defaultHttpDataInstance = nil;
+ (void) initialize {
  if (self == [HttpData class]) {
    defaultHttpDataInstance = [[HttpData alloc] init];
  }
}
+ (HttpData*) defaultInstance {
  return defaultHttpDataInstance;
}
- (HttpData*) defaultInstance {
  return defaultHttpDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUrl) {
    return NO;
  }
  if (!self.hasCastTime) {
    return NO;
  }
  if (!self.hasResponseSize) {
    return NO;
  }
  if (!self.hasRequestSize) {
    return NO;
  }
  if (self.hasError) {
    if (!self.error.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasUrl) {
    [output writeString:1 value:self.url];
  }
  if (self.hasCastTime) {
    [output writeDouble:2 value:self.castTime];
  }
  if (self.hasError) {
    [output writeMessage:3 value:self.error];
  }
  if (self.hasResponseSize) {
    [output writeInt32:4 value:self.responseSize];
  }
  if (self.hasRequestSize) {
    [output writeInt32:5 value:self.requestSize];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUrl) {
    size += computeStringSize(1, self.url);
  }
  if (self.hasCastTime) {
    size += computeDoubleSize(2, self.castTime);
  }
  if (self.hasError) {
    size += computeMessageSize(3, self.error);
  }
  if (self.hasResponseSize) {
    size += computeInt32Size(4, self.responseSize);
  }
  if (self.hasRequestSize) {
    size += computeInt32Size(5, self.requestSize);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (HttpData*) parseFromData:(NSData*) data {
  return (HttpData*)[[[HttpData builder] mergeFromData:data] build];
}
+ (HttpData*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (HttpData*)[[[HttpData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HttpData*) parseFromInputStream:(NSInputStream*) input {
  return (HttpData*)[[[HttpData builder] mergeFromInputStream:input] build];
}
+ (HttpData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (HttpData*)[[[HttpData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HttpData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (HttpData*)[[[HttpData builder] mergeFromCodedInputStream:input] build];
}
+ (HttpData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (HttpData*)[[[HttpData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HttpData_Builder*) builder {
  return [[[HttpData_Builder alloc] init] autorelease];
}
+ (HttpData_Builder*) builderWithPrototype:(HttpData*) prototype {
  return [[HttpData builder] mergeFrom:prototype];
}
- (HttpData_Builder*) builder {
  return [HttpData builder];
}
@end

@interface HttpData_Builder()
@property (retain) HttpData* result;
@end

@implementation HttpData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[HttpData alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (HttpData_Builder*) clear {
  self.result = [[[HttpData alloc] init] autorelease];
  return self;
}
- (HttpData_Builder*) clone {
  return [HttpData builderWithPrototype:result];
}
- (HttpData*) defaultInstance {
  return [HttpData defaultInstance];
}
- (HttpData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HttpData*) buildPartial {
  HttpData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (HttpData_Builder*) mergeFrom:(HttpData*) other {
  if (other == [HttpData defaultInstance]) {
    return self;
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasCastTime) {
    [self setCastTime:other.castTime];
  }
  if (other.hasError) {
    [self mergeError:other.error];
  }
  if (other.hasResponseSize) {
    [self setResponseSize:other.responseSize];
  }
  if (other.hasRequestSize) {
    [self setRequestSize:other.requestSize];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HttpData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (HttpData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUrl:[input readString]];
        break;
      }
      case 17: {
        [self setCastTime:[input readDouble]];
        break;
      }
      case 26: {
        HttpError_Builder* subBuilder = [HttpError builder];
        if (self.hasError) {
          [subBuilder mergeFrom:self.error];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setError:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setResponseSize:[input readInt32]];
        break;
      }
      case 40: {
        [self setRequestSize:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (NSString*) url {
  return result.url;
}
- (HttpData_Builder*) setUrl:(NSString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (HttpData_Builder*) clearUrl {
  result.hasUrl = NO;
  result.url = @"";
  return self;
}
- (BOOL) hasCastTime {
  return result.hasCastTime;
}
- (Float64) castTime {
  return result.castTime;
}
- (HttpData_Builder*) setCastTime:(Float64) value {
  result.hasCastTime = YES;
  result.castTime = value;
  return self;
}
- (HttpData_Builder*) clearCastTime {
  result.hasCastTime = NO;
  result.castTime = 0;
  return self;
}
- (BOOL) hasError {
  return result.hasError;
}
- (HttpError*) error {
  return result.error;
}
- (HttpData_Builder*) setError:(HttpError*) value {
  result.hasError = YES;
  result.error = value;
  return self;
}
- (HttpData_Builder*) setErrorBuilder:(HttpError_Builder*) builderForValue {
  return [self setError:[builderForValue build]];
}
- (HttpData_Builder*) mergeError:(HttpError*) value {
  if (result.hasError &&
      result.error != [HttpError defaultInstance]) {
    result.error =
      [[[HttpError builderWithPrototype:result.error] mergeFrom:value] buildPartial];
  } else {
    result.error = value;
  }
  result.hasError = YES;
  return self;
}
- (HttpData_Builder*) clearError {
  result.hasError = NO;
  result.error = [HttpError defaultInstance];
  return self;
}
- (BOOL) hasResponseSize {
  return result.hasResponseSize;
}
- (int32_t) responseSize {
  return result.responseSize;
}
- (HttpData_Builder*) setResponseSize:(int32_t) value {
  result.hasResponseSize = YES;
  result.responseSize = value;
  return self;
}
- (HttpData_Builder*) clearResponseSize {
  result.hasResponseSize = NO;
  result.responseSize = 0;
  return self;
}
- (BOOL) hasRequestSize {
  return result.hasRequestSize;
}
- (int32_t) requestSize {
  return result.requestSize;
}
- (HttpData_Builder*) setRequestSize:(int32_t) value {
  result.hasRequestSize = YES;
  result.requestSize = value;
  return self;
}
- (HttpData_Builder*) clearRequestSize {
  result.hasRequestSize = NO;
  result.requestSize = 0;
  return self;
}
@end

@interface SocketConnect ()
@property (retain) NSString* remoteIp;
@property int32_t remotePort;
@property Float64 castTime;
@property int32_t errnoCode;
@property (retain) NSString* erronMesage;
@end

@implementation SocketConnect

- (BOOL) hasRemoteIp {
  return !!hasRemoteIp_;
}
- (void) setHasRemoteIp:(BOOL) value {
  hasRemoteIp_ = !!value;
}
@synthesize remoteIp;
- (BOOL) hasRemotePort {
  return !!hasRemotePort_;
}
- (void) setHasRemotePort:(BOOL) value {
  hasRemotePort_ = !!value;
}
@synthesize remotePort;
- (BOOL) hasCastTime {
  return !!hasCastTime_;
}
- (void) setHasCastTime:(BOOL) value {
  hasCastTime_ = !!value;
}
@synthesize castTime;
- (BOOL) hasErrnoCode {
  return !!hasErrnoCode_;
}
- (void) setHasErrnoCode:(BOOL) value {
  hasErrnoCode_ = !!value;
}
@synthesize errnoCode;
- (BOOL) hasErronMesage {
  return !!hasErronMesage_;
}
- (void) setHasErronMesage:(BOOL) value {
  hasErronMesage_ = !!value;
}
@synthesize erronMesage;
- (void) dealloc {
  self.remoteIp = nil;
  self.erronMesage = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.remoteIp = @"";
    self.remotePort = 0;
    self.castTime = 0;
    self.errnoCode = 0;
    self.erronMesage = @"";
  }
  return self;
}
static SocketConnect* defaultSocketConnectInstance = nil;
+ (void) initialize {
  if (self == [SocketConnect class]) {
    defaultSocketConnectInstance = [[SocketConnect alloc] init];
  }
}
+ (SocketConnect*) defaultInstance {
  return defaultSocketConnectInstance;
}
- (SocketConnect*) defaultInstance {
  return defaultSocketConnectInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRemoteIp) {
    return NO;
  }
  if (!self.hasRemotePort) {
    return NO;
  }
  if (!self.hasCastTime) {
    return NO;
  }
  if (!self.hasErrnoCode) {
    return NO;
  }
  if (!self.hasErronMesage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasRemoteIp) {
    [output writeString:1 value:self.remoteIp];
  }
  if (self.hasRemotePort) {
    [output writeInt32:2 value:self.remotePort];
  }
  if (self.hasCastTime) {
    [output writeDouble:3 value:self.castTime];
  }
  if (self.hasErrnoCode) {
    [output writeInt32:4 value:self.errnoCode];
  }
  if (self.hasErronMesage) {
    [output writeString:5 value:self.erronMesage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRemoteIp) {
    size += computeStringSize(1, self.remoteIp);
  }
  if (self.hasRemotePort) {
    size += computeInt32Size(2, self.remotePort);
  }
  if (self.hasCastTime) {
    size += computeDoubleSize(3, self.castTime);
  }
  if (self.hasErrnoCode) {
    size += computeInt32Size(4, self.errnoCode);
  }
  if (self.hasErronMesage) {
    size += computeStringSize(5, self.erronMesage);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SocketConnect*) parseFromData:(NSData*) data {
  return (SocketConnect*)[[[SocketConnect builder] mergeFromData:data] build];
}
+ (SocketConnect*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SocketConnect*)[[[SocketConnect builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SocketConnect*) parseFromInputStream:(NSInputStream*) input {
  return (SocketConnect*)[[[SocketConnect builder] mergeFromInputStream:input] build];
}
+ (SocketConnect*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SocketConnect*)[[[SocketConnect builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SocketConnect*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (SocketConnect*)[[[SocketConnect builder] mergeFromCodedInputStream:input] build];
}
+ (SocketConnect*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SocketConnect*)[[[SocketConnect builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SocketConnect_Builder*) builder {
  return [[[SocketConnect_Builder alloc] init] autorelease];
}
+ (SocketConnect_Builder*) builderWithPrototype:(SocketConnect*) prototype {
  return [[SocketConnect builder] mergeFrom:prototype];
}
- (SocketConnect_Builder*) builder {
  return [SocketConnect builder];
}
@end

@interface SocketConnect_Builder()
@property (retain) SocketConnect* result;
@end

@implementation SocketConnect_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SocketConnect alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (SocketConnect_Builder*) clear {
  self.result = [[[SocketConnect alloc] init] autorelease];
  return self;
}
- (SocketConnect_Builder*) clone {
  return [SocketConnect builderWithPrototype:result];
}
- (SocketConnect*) defaultInstance {
  return [SocketConnect defaultInstance];
}
- (SocketConnect*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SocketConnect*) buildPartial {
  SocketConnect* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SocketConnect_Builder*) mergeFrom:(SocketConnect*) other {
  if (other == [SocketConnect defaultInstance]) {
    return self;
  }
  if (other.hasRemoteIp) {
    [self setRemoteIp:other.remoteIp];
  }
  if (other.hasRemotePort) {
    [self setRemotePort:other.remotePort];
  }
  if (other.hasCastTime) {
    [self setCastTime:other.castTime];
  }
  if (other.hasErrnoCode) {
    [self setErrnoCode:other.errnoCode];
  }
  if (other.hasErronMesage) {
    [self setErronMesage:other.erronMesage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SocketConnect_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (SocketConnect_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setRemoteIp:[input readString]];
        break;
      }
      case 16: {
        [self setRemotePort:[input readInt32]];
        break;
      }
      case 25: {
        [self setCastTime:[input readDouble]];
        break;
      }
      case 32: {
        [self setErrnoCode:[input readInt32]];
        break;
      }
      case 42: {
        [self setErronMesage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRemoteIp {
  return result.hasRemoteIp;
}
- (NSString*) remoteIp {
  return result.remoteIp;
}
- (SocketConnect_Builder*) setRemoteIp:(NSString*) value {
  result.hasRemoteIp = YES;
  result.remoteIp = value;
  return self;
}
- (SocketConnect_Builder*) clearRemoteIp {
  result.hasRemoteIp = NO;
  result.remoteIp = @"";
  return self;
}
- (BOOL) hasRemotePort {
  return result.hasRemotePort;
}
- (int32_t) remotePort {
  return result.remotePort;
}
- (SocketConnect_Builder*) setRemotePort:(int32_t) value {
  result.hasRemotePort = YES;
  result.remotePort = value;
  return self;
}
- (SocketConnect_Builder*) clearRemotePort {
  result.hasRemotePort = NO;
  result.remotePort = 0;
  return self;
}
- (BOOL) hasCastTime {
  return result.hasCastTime;
}
- (Float64) castTime {
  return result.castTime;
}
- (SocketConnect_Builder*) setCastTime:(Float64) value {
  result.hasCastTime = YES;
  result.castTime = value;
  return self;
}
- (SocketConnect_Builder*) clearCastTime {
  result.hasCastTime = NO;
  result.castTime = 0;
  return self;
}
- (BOOL) hasErrnoCode {
  return result.hasErrnoCode;
}
- (int32_t) errnoCode {
  return result.errnoCode;
}
- (SocketConnect_Builder*) setErrnoCode:(int32_t) value {
  result.hasErrnoCode = YES;
  result.errnoCode = value;
  return self;
}
- (SocketConnect_Builder*) clearErrnoCode {
  result.hasErrnoCode = NO;
  result.errnoCode = 0;
  return self;
}
- (BOOL) hasErronMesage {
  return result.hasErronMesage;
}
- (NSString*) erronMesage {
  return result.erronMesage;
}
- (SocketConnect_Builder*) setErronMesage:(NSString*) value {
  result.hasErronMesage = YES;
  result.erronMesage = value;
  return self;
}
- (SocketConnect_Builder*) clearErronMesage {
  result.hasErronMesage = NO;
  result.erronMesage = @"";
  return self;
}
@end

@interface SocketSendRecvData ()
@property (retain) NSString* remoteIp;
@property int32_t remotePort;
@property Float64 castTime;
@property int32_t errnoCode;
@property (retain) NSString* erronMesage;
@property (retain) NSString* methodName;
@property int32_t dataSize;
@end

@implementation SocketSendRecvData

- (BOOL) hasRemoteIp {
  return !!hasRemoteIp_;
}
- (void) setHasRemoteIp:(BOOL) value {
  hasRemoteIp_ = !!value;
}
@synthesize remoteIp;
- (BOOL) hasRemotePort {
  return !!hasRemotePort_;
}
- (void) setHasRemotePort:(BOOL) value {
  hasRemotePort_ = !!value;
}
@synthesize remotePort;
- (BOOL) hasCastTime {
  return !!hasCastTime_;
}
- (void) setHasCastTime:(BOOL) value {
  hasCastTime_ = !!value;
}
@synthesize castTime;
- (BOOL) hasErrnoCode {
  return !!hasErrnoCode_;
}
- (void) setHasErrnoCode:(BOOL) value {
  hasErrnoCode_ = !!value;
}
@synthesize errnoCode;
- (BOOL) hasErronMesage {
  return !!hasErronMesage_;
}
- (void) setHasErronMesage:(BOOL) value {
  hasErronMesage_ = !!value;
}
@synthesize erronMesage;
- (BOOL) hasMethodName {
  return !!hasMethodName_;
}
- (void) setHasMethodName:(BOOL) value {
  hasMethodName_ = !!value;
}
@synthesize methodName;
- (BOOL) hasDataSize {
  return !!hasDataSize_;
}
- (void) setHasDataSize:(BOOL) value {
  hasDataSize_ = !!value;
}
@synthesize dataSize;
- (void) dealloc {
  self.remoteIp = nil;
  self.erronMesage = nil;
  self.methodName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.remoteIp = @"";
    self.remotePort = 0;
    self.castTime = 0;
    self.errnoCode = 0;
    self.erronMesage = @"";
    self.methodName = @"";
    self.dataSize = 0;
  }
  return self;
}
static SocketSendRecvData* defaultSocketSendRecvDataInstance = nil;
+ (void) initialize {
  if (self == [SocketSendRecvData class]) {
    defaultSocketSendRecvDataInstance = [[SocketSendRecvData alloc] init];
  }
}
+ (SocketSendRecvData*) defaultInstance {
  return defaultSocketSendRecvDataInstance;
}
- (SocketSendRecvData*) defaultInstance {
  return defaultSocketSendRecvDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRemoteIp) {
    return NO;
  }
  if (!self.hasRemotePort) {
    return NO;
  }
  if (!self.hasCastTime) {
    return NO;
  }
  if (!self.hasErrnoCode) {
    return NO;
  }
  if (!self.hasErronMesage) {
    return NO;
  }
  if (!self.hasMethodName) {
    return NO;
  }
  if (!self.hasDataSize) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasRemoteIp) {
    [output writeString:1 value:self.remoteIp];
  }
  if (self.hasRemotePort) {
    [output writeInt32:2 value:self.remotePort];
  }
  if (self.hasCastTime) {
    [output writeDouble:3 value:self.castTime];
  }
  if (self.hasErrnoCode) {
    [output writeInt32:4 value:self.errnoCode];
  }
  if (self.hasErronMesage) {
    [output writeString:5 value:self.erronMesage];
  }
  if (self.hasMethodName) {
    [output writeString:6 value:self.methodName];
  }
  if (self.hasDataSize) {
    [output writeInt32:7 value:self.dataSize];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRemoteIp) {
    size += computeStringSize(1, self.remoteIp);
  }
  if (self.hasRemotePort) {
    size += computeInt32Size(2, self.remotePort);
  }
  if (self.hasCastTime) {
    size += computeDoubleSize(3, self.castTime);
  }
  if (self.hasErrnoCode) {
    size += computeInt32Size(4, self.errnoCode);
  }
  if (self.hasErronMesage) {
    size += computeStringSize(5, self.erronMesage);
  }
  if (self.hasMethodName) {
    size += computeStringSize(6, self.methodName);
  }
  if (self.hasDataSize) {
    size += computeInt32Size(7, self.dataSize);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SocketSendRecvData*) parseFromData:(NSData*) data {
  return (SocketSendRecvData*)[[[SocketSendRecvData builder] mergeFromData:data] build];
}
+ (SocketSendRecvData*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SocketSendRecvData*)[[[SocketSendRecvData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SocketSendRecvData*) parseFromInputStream:(NSInputStream*) input {
  return (SocketSendRecvData*)[[[SocketSendRecvData builder] mergeFromInputStream:input] build];
}
+ (SocketSendRecvData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SocketSendRecvData*)[[[SocketSendRecvData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SocketSendRecvData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (SocketSendRecvData*)[[[SocketSendRecvData builder] mergeFromCodedInputStream:input] build];
}
+ (SocketSendRecvData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (SocketSendRecvData*)[[[SocketSendRecvData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SocketSendRecvData_Builder*) builder {
  return [[[SocketSendRecvData_Builder alloc] init] autorelease];
}
+ (SocketSendRecvData_Builder*) builderWithPrototype:(SocketSendRecvData*) prototype {
  return [[SocketSendRecvData builder] mergeFrom:prototype];
}
- (SocketSendRecvData_Builder*) builder {
  return [SocketSendRecvData builder];
}
@end

@interface SocketSendRecvData_Builder()
@property (retain) SocketSendRecvData* result;
@end

@implementation SocketSendRecvData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SocketSendRecvData alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (SocketSendRecvData_Builder*) clear {
  self.result = [[[SocketSendRecvData alloc] init] autorelease];
  return self;
}
- (SocketSendRecvData_Builder*) clone {
  return [SocketSendRecvData builderWithPrototype:result];
}
- (SocketSendRecvData*) defaultInstance {
  return [SocketSendRecvData defaultInstance];
}
- (SocketSendRecvData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SocketSendRecvData*) buildPartial {
  SocketSendRecvData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SocketSendRecvData_Builder*) mergeFrom:(SocketSendRecvData*) other {
  if (other == [SocketSendRecvData defaultInstance]) {
    return self;
  }
  if (other.hasRemoteIp) {
    [self setRemoteIp:other.remoteIp];
  }
  if (other.hasRemotePort) {
    [self setRemotePort:other.remotePort];
  }
  if (other.hasCastTime) {
    [self setCastTime:other.castTime];
  }
  if (other.hasErrnoCode) {
    [self setErrnoCode:other.errnoCode];
  }
  if (other.hasErronMesage) {
    [self setErronMesage:other.erronMesage];
  }
  if (other.hasMethodName) {
    [self setMethodName:other.methodName];
  }
  if (other.hasDataSize) {
    [self setDataSize:other.dataSize];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SocketSendRecvData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (SocketSendRecvData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setRemoteIp:[input readString]];
        break;
      }
      case 16: {
        [self setRemotePort:[input readInt32]];
        break;
      }
      case 25: {
        [self setCastTime:[input readDouble]];
        break;
      }
      case 32: {
        [self setErrnoCode:[input readInt32]];
        break;
      }
      case 42: {
        [self setErronMesage:[input readString]];
        break;
      }
      case 50: {
        [self setMethodName:[input readString]];
        break;
      }
      case 56: {
        [self setDataSize:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRemoteIp {
  return result.hasRemoteIp;
}
- (NSString*) remoteIp {
  return result.remoteIp;
}
- (SocketSendRecvData_Builder*) setRemoteIp:(NSString*) value {
  result.hasRemoteIp = YES;
  result.remoteIp = value;
  return self;
}
- (SocketSendRecvData_Builder*) clearRemoteIp {
  result.hasRemoteIp = NO;
  result.remoteIp = @"";
  return self;
}
- (BOOL) hasRemotePort {
  return result.hasRemotePort;
}
- (int32_t) remotePort {
  return result.remotePort;
}
- (SocketSendRecvData_Builder*) setRemotePort:(int32_t) value {
  result.hasRemotePort = YES;
  result.remotePort = value;
  return self;
}
- (SocketSendRecvData_Builder*) clearRemotePort {
  result.hasRemotePort = NO;
  result.remotePort = 0;
  return self;
}
- (BOOL) hasCastTime {
  return result.hasCastTime;
}
- (Float64) castTime {
  return result.castTime;
}
- (SocketSendRecvData_Builder*) setCastTime:(Float64) value {
  result.hasCastTime = YES;
  result.castTime = value;
  return self;
}
- (SocketSendRecvData_Builder*) clearCastTime {
  result.hasCastTime = NO;
  result.castTime = 0;
  return self;
}
- (BOOL) hasErrnoCode {
  return result.hasErrnoCode;
}
- (int32_t) errnoCode {
  return result.errnoCode;
}
- (SocketSendRecvData_Builder*) setErrnoCode:(int32_t) value {
  result.hasErrnoCode = YES;
  result.errnoCode = value;
  return self;
}
- (SocketSendRecvData_Builder*) clearErrnoCode {
  result.hasErrnoCode = NO;
  result.errnoCode = 0;
  return self;
}
- (BOOL) hasErronMesage {
  return result.hasErronMesage;
}
- (NSString*) erronMesage {
  return result.erronMesage;
}
- (SocketSendRecvData_Builder*) setErronMesage:(NSString*) value {
  result.hasErronMesage = YES;
  result.erronMesage = value;
  return self;
}
- (SocketSendRecvData_Builder*) clearErronMesage {
  result.hasErronMesage = NO;
  result.erronMesage = @"";
  return self;
}
- (BOOL) hasMethodName {
  return result.hasMethodName;
}
- (NSString*) methodName {
  return result.methodName;
}
- (SocketSendRecvData_Builder*) setMethodName:(NSString*) value {
  result.hasMethodName = YES;
  result.methodName = value;
  return self;
}
- (SocketSendRecvData_Builder*) clearMethodName {
  result.hasMethodName = NO;
  result.methodName = @"";
  return self;
}
- (BOOL) hasDataSize {
  return result.hasDataSize;
}
- (int32_t) dataSize {
  return result.dataSize;
}
- (SocketSendRecvData_Builder*) setDataSize:(int32_t) value {
  result.hasDataSize = YES;
  result.dataSize = value;
  return self;
}
- (SocketSendRecvData_Builder*) clearDataSize {
  result.hasDataSize = NO;
  result.dataSize = 0;
  return self;
}
@end

@interface MethodData ()
@property (retain) NSString* methodName;
@property (retain) NSString* className;
@property Float64 castTime;
@property BOOL isMainThread;
@property (retain) NSString* params;
@property (retain) NSMutableArray* mutableMetricDatasList;
@end

@implementation MethodData

- (BOOL) hasMethodName {
  return !!hasMethodName_;
}
- (void) setHasMethodName:(BOOL) value {
  hasMethodName_ = !!value;
}
@synthesize methodName;
- (BOOL) hasClassName {
  return !!hasClassName_;
}
- (void) setHasClassName:(BOOL) value {
  hasClassName_ = !!value;
}
@synthesize className;
- (BOOL) hasCastTime {
  return !!hasCastTime_;
}
- (void) setHasCastTime:(BOOL) value {
  hasCastTime_ = !!value;
}
@synthesize castTime;
- (BOOL) hasIsMainThread {
  return !!hasIsMainThread_;
}
- (void) setHasIsMainThread:(BOOL) value {
  hasIsMainThread_ = !!value;
}
- (BOOL) isMainThread {
  return !!isMainThread_;
}
- (void) setIsMainThread:(BOOL) value {
  isMainThread_ = !!value;
}
- (BOOL) hasParams {
  return !!hasParams_;
}
- (void) setHasParams:(BOOL) value {
  hasParams_ = !!value;
}
@synthesize params;
@synthesize mutableMetricDatasList;
- (void) dealloc {
  self.methodName = nil;
  self.className = nil;
  self.params = nil;
  self.mutableMetricDatasList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.methodName = @"";
    self.className = @"";
    self.castTime = 0;
    self.isMainThread = NO;
    self.params = @"";
  }
  return self;
}
static MethodData* defaultMethodDataInstance = nil;
+ (void) initialize {
  if (self == [MethodData class]) {
    defaultMethodDataInstance = [[MethodData alloc] init];
  }
}
+ (MethodData*) defaultInstance {
  return defaultMethodDataInstance;
}
- (MethodData*) defaultInstance {
  return defaultMethodDataInstance;
}
- (NSArray*) metricDatasList {
  return mutableMetricDatasList;
}
- (MetricData*) metricDatasAtIndex:(int32_t) index {
  id value = [mutableMetricDatasList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasMethodName) {
    return NO;
  }
  if (!self.hasClassName) {
    return NO;
  }
  if (!self.hasCastTime) {
    return NO;
  }
  if (!self.hasIsMainThread) {
    return NO;
  }
  if (!self.hasParams) {
    return NO;
  }
  for (MetricData* element in self.metricDatasList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasMethodName) {
    [output writeString:1 value:self.methodName];
  }
  if (self.hasClassName) {
    [output writeString:2 value:self.className];
  }
  if (self.hasCastTime) {
    [output writeDouble:3 value:self.castTime];
  }
  if (self.hasIsMainThread) {
    [output writeBool:4 value:self.isMainThread];
  }
  if (self.hasParams) {
    [output writeString:5 value:self.params];
  }
  for (MetricData* element in self.metricDatasList) {
    [output writeMessage:6 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMethodName) {
    size += computeStringSize(1, self.methodName);
  }
  if (self.hasClassName) {
    size += computeStringSize(2, self.className);
  }
  if (self.hasCastTime) {
    size += computeDoubleSize(3, self.castTime);
  }
  if (self.hasIsMainThread) {
    size += computeBoolSize(4, self.isMainThread);
  }
  if (self.hasParams) {
    size += computeStringSize(5, self.params);
  }
  for (MetricData* element in self.metricDatasList) {
    size += computeMessageSize(6, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MethodData*) parseFromData:(NSData*) data {
  return (MethodData*)[[[MethodData builder] mergeFromData:data] build];
}
+ (MethodData*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MethodData*)[[[MethodData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MethodData*) parseFromInputStream:(NSInputStream*) input {
  return (MethodData*)[[[MethodData builder] mergeFromInputStream:input] build];
}
+ (MethodData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MethodData*)[[[MethodData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MethodData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (MethodData*)[[[MethodData builder] mergeFromCodedInputStream:input] build];
}
+ (MethodData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MethodData*)[[[MethodData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MethodData_Builder*) builder {
  return [[[MethodData_Builder alloc] init] autorelease];
}
+ (MethodData_Builder*) builderWithPrototype:(MethodData*) prototype {
  return [[MethodData builder] mergeFrom:prototype];
}
- (MethodData_Builder*) builder {
  return [MethodData builder];
}
@end

@interface MethodData_Builder()
@property (retain) MethodData* result;
@end

@implementation MethodData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MethodData alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (MethodData_Builder*) clear {
  self.result = [[[MethodData alloc] init] autorelease];
  return self;
}
- (MethodData_Builder*) clone {
  return [MethodData builderWithPrototype:result];
}
- (MethodData*) defaultInstance {
  return [MethodData defaultInstance];
}
- (MethodData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MethodData*) buildPartial {
  MethodData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MethodData_Builder*) mergeFrom:(MethodData*) other {
  if (other == [MethodData defaultInstance]) {
    return self;
  }
  if (other.hasMethodName) {
    [self setMethodName:other.methodName];
  }
  if (other.hasClassName) {
    [self setClassName:other.className];
  }
  if (other.hasCastTime) {
    [self setCastTime:other.castTime];
  }
  if (other.hasIsMainThread) {
    [self setIsMainThread:other.isMainThread];
  }
  if (other.hasParams) {
    [self setParams:other.params];
  }
  if (other.mutableMetricDatasList.count > 0) {
    if (result.mutableMetricDatasList == nil) {
      result.mutableMetricDatasList = [NSMutableArray array];
    }
    [result.mutableMetricDatasList addObjectsFromArray:other.mutableMetricDatasList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MethodData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (MethodData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMethodName:[input readString]];
        break;
      }
      case 18: {
        [self setClassName:[input readString]];
        break;
      }
      case 25: {
        [self setCastTime:[input readDouble]];
        break;
      }
      case 32: {
        [self setIsMainThread:[input readBool]];
        break;
      }
      case 42: {
        [self setParams:[input readString]];
        break;
      }
      case 50: {
        MetricData_Builder* subBuilder = [MetricData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMetricDatas:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMethodName {
  return result.hasMethodName;
}
- (NSString*) methodName {
  return result.methodName;
}
- (MethodData_Builder*) setMethodName:(NSString*) value {
  result.hasMethodName = YES;
  result.methodName = value;
  return self;
}
- (MethodData_Builder*) clearMethodName {
  result.hasMethodName = NO;
  result.methodName = @"";
  return self;
}
- (BOOL) hasClassName {
  return result.hasClassName;
}
- (NSString*) className {
  return result.className;
}
- (MethodData_Builder*) setClassName:(NSString*) value {
  result.hasClassName = YES;
  result.className = value;
  return self;
}
- (MethodData_Builder*) clearClassName {
  result.hasClassName = NO;
  result.className = @"";
  return self;
}
- (BOOL) hasCastTime {
  return result.hasCastTime;
}
- (Float64) castTime {
  return result.castTime;
}
- (MethodData_Builder*) setCastTime:(Float64) value {
  result.hasCastTime = YES;
  result.castTime = value;
  return self;
}
- (MethodData_Builder*) clearCastTime {
  result.hasCastTime = NO;
  result.castTime = 0;
  return self;
}
- (BOOL) hasIsMainThread {
  return result.hasIsMainThread;
}
- (BOOL) isMainThread {
  return result.isMainThread;
}
- (MethodData_Builder*) setIsMainThread:(BOOL) value {
  result.hasIsMainThread = YES;
  result.isMainThread = value;
  return self;
}
- (MethodData_Builder*) clearIsMainThread {
  result.hasIsMainThread = NO;
  result.isMainThread = NO;
  return self;
}
- (BOOL) hasParams {
  return result.hasParams;
}
- (NSString*) params {
  return result.params;
}
- (MethodData_Builder*) setParams:(NSString*) value {
  result.hasParams = YES;
  result.params = value;
  return self;
}
- (MethodData_Builder*) clearParams {
  result.hasParams = NO;
  result.params = @"";
  return self;
}
- (NSArray*) metricDatasList {
  if (result.mutableMetricDatasList == nil) { return [NSArray array]; }
  return result.mutableMetricDatasList;
}
- (MetricData*) metricDatasAtIndex:(int32_t) index {
  return [result metricDatasAtIndex:index];
}
- (MethodData_Builder*) replaceMetricDatasAtIndex:(int32_t) index with:(MetricData*) value {
  [result.mutableMetricDatasList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MethodData_Builder*) addAllMetricDatas:(NSArray*) values {
  if (result.mutableMetricDatasList == nil) {
    result.mutableMetricDatasList = [NSMutableArray array];
  }
  [result.mutableMetricDatasList addObjectsFromArray:values];
  return self;
}
- (MethodData_Builder*) clearMetricDatasList {
  result.mutableMetricDatasList = nil;
  return self;
}
- (MethodData_Builder*) addMetricDatas:(MetricData*) value {
  if (result.mutableMetricDatasList == nil) {
    result.mutableMetricDatasList = [NSMutableArray array];
  }
  [result.mutableMetricDatasList addObject:value];
  return self;
}
@end

@interface WebViewData ()
@property (retain) NSString* url;
@property Float64 castTime;
@property (retain) NSString* webviewName;
@property int32_t errnoCode;
@property (retain) NSString* erronMesage;
@end

@implementation WebViewData

- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value {
  hasUrl_ = !!value;
}
@synthesize url;
- (BOOL) hasCastTime {
  return !!hasCastTime_;
}
- (void) setHasCastTime:(BOOL) value {
  hasCastTime_ = !!value;
}
@synthesize castTime;
- (BOOL) hasWebviewName {
  return !!hasWebviewName_;
}
- (void) setHasWebviewName:(BOOL) value {
  hasWebviewName_ = !!value;
}
@synthesize webviewName;
- (BOOL) hasErrnoCode {
  return !!hasErrnoCode_;
}
- (void) setHasErrnoCode:(BOOL) value {
  hasErrnoCode_ = !!value;
}
@synthesize errnoCode;
- (BOOL) hasErronMesage {
  return !!hasErronMesage_;
}
- (void) setHasErronMesage:(BOOL) value {
  hasErronMesage_ = !!value;
}
@synthesize erronMesage;
- (void) dealloc {
  self.url = nil;
  self.webviewName = nil;
  self.erronMesage = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.url = @"";
    self.castTime = 0;
    self.webviewName = @"";
    self.errnoCode = 0;
    self.erronMesage = @"";
  }
  return self;
}
static WebViewData* defaultWebViewDataInstance = nil;
+ (void) initialize {
  if (self == [WebViewData class]) {
    defaultWebViewDataInstance = [[WebViewData alloc] init];
  }
}
+ (WebViewData*) defaultInstance {
  return defaultWebViewDataInstance;
}
- (WebViewData*) defaultInstance {
  return defaultWebViewDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUrl) {
    return NO;
  }
  if (!self.hasCastTime) {
    return NO;
  }
  if (!self.hasWebviewName) {
    return NO;
  }
  if (!self.hasErrnoCode) {
    return NO;
  }
  if (!self.hasErronMesage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasUrl) {
    [output writeString:1 value:self.url];
  }
  if (self.hasCastTime) {
    [output writeDouble:2 value:self.castTime];
  }
  if (self.hasWebviewName) {
    [output writeString:3 value:self.webviewName];
  }
  if (self.hasErrnoCode) {
    [output writeInt32:4 value:self.errnoCode];
  }
  if (self.hasErronMesage) {
    [output writeString:5 value:self.erronMesage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUrl) {
    size += computeStringSize(1, self.url);
  }
  if (self.hasCastTime) {
    size += computeDoubleSize(2, self.castTime);
  }
  if (self.hasWebviewName) {
    size += computeStringSize(3, self.webviewName);
  }
  if (self.hasErrnoCode) {
    size += computeInt32Size(4, self.errnoCode);
  }
  if (self.hasErronMesage) {
    size += computeStringSize(5, self.erronMesage);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (WebViewData*) parseFromData:(NSData*) data {
  return (WebViewData*)[[[WebViewData builder] mergeFromData:data] build];
}
+ (WebViewData*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (WebViewData*)[[[WebViewData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WebViewData*) parseFromInputStream:(NSInputStream*) input {
  return (WebViewData*)[[[WebViewData builder] mergeFromInputStream:input] build];
}
+ (WebViewData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (WebViewData*)[[[WebViewData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebViewData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (WebViewData*)[[[WebViewData builder] mergeFromCodedInputStream:input] build];
}
+ (WebViewData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (WebViewData*)[[[WebViewData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebViewData_Builder*) builder {
  return [[[WebViewData_Builder alloc] init] autorelease];
}
+ (WebViewData_Builder*) builderWithPrototype:(WebViewData*) prototype {
  return [[WebViewData builder] mergeFrom:prototype];
}
- (WebViewData_Builder*) builder {
  return [WebViewData builder];
}
@end

@interface WebViewData_Builder()
@property (retain) WebViewData* result;
@end

@implementation WebViewData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[WebViewData alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (WebViewData_Builder*) clear {
  self.result = [[[WebViewData alloc] init] autorelease];
  return self;
}
- (WebViewData_Builder*) clone {
  return [WebViewData builderWithPrototype:result];
}
- (WebViewData*) defaultInstance {
  return [WebViewData defaultInstance];
}
- (WebViewData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WebViewData*) buildPartial {
  WebViewData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (WebViewData_Builder*) mergeFrom:(WebViewData*) other {
  if (other == [WebViewData defaultInstance]) {
    return self;
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasCastTime) {
    [self setCastTime:other.castTime];
  }
  if (other.hasWebviewName) {
    [self setWebviewName:other.webviewName];
  }
  if (other.hasErrnoCode) {
    [self setErrnoCode:other.errnoCode];
  }
  if (other.hasErronMesage) {
    [self setErronMesage:other.erronMesage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WebViewData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (WebViewData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUrl:[input readString]];
        break;
      }
      case 17: {
        [self setCastTime:[input readDouble]];
        break;
      }
      case 26: {
        [self setWebviewName:[input readString]];
        break;
      }
      case 32: {
        [self setErrnoCode:[input readInt32]];
        break;
      }
      case 42: {
        [self setErronMesage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (NSString*) url {
  return result.url;
}
- (WebViewData_Builder*) setUrl:(NSString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (WebViewData_Builder*) clearUrl {
  result.hasUrl = NO;
  result.url = @"";
  return self;
}
- (BOOL) hasCastTime {
  return result.hasCastTime;
}
- (Float64) castTime {
  return result.castTime;
}
- (WebViewData_Builder*) setCastTime:(Float64) value {
  result.hasCastTime = YES;
  result.castTime = value;
  return self;
}
- (WebViewData_Builder*) clearCastTime {
  result.hasCastTime = NO;
  result.castTime = 0;
  return self;
}
- (BOOL) hasWebviewName {
  return result.hasWebviewName;
}
- (NSString*) webviewName {
  return result.webviewName;
}
- (WebViewData_Builder*) setWebviewName:(NSString*) value {
  result.hasWebviewName = YES;
  result.webviewName = value;
  return self;
}
- (WebViewData_Builder*) clearWebviewName {
  result.hasWebviewName = NO;
  result.webviewName = @"";
  return self;
}
- (BOOL) hasErrnoCode {
  return result.hasErrnoCode;
}
- (int32_t) errnoCode {
  return result.errnoCode;
}
- (WebViewData_Builder*) setErrnoCode:(int32_t) value {
  result.hasErrnoCode = YES;
  result.errnoCode = value;
  return self;
}
- (WebViewData_Builder*) clearErrnoCode {
  result.hasErrnoCode = NO;
  result.errnoCode = 0;
  return self;
}
- (BOOL) hasErronMesage {
  return result.hasErronMesage;
}
- (NSString*) erronMesage {
  return result.erronMesage;
}
- (WebViewData_Builder*) setErronMesage:(NSString*) value {
  result.hasErronMesage = YES;
  result.erronMesage = value;
  return self;
}
- (WebViewData_Builder*) clearErronMesage {
  result.hasErronMesage = NO;
  result.erronMesage = @"";
  return self;
}
@end

@interface MemoryWaringData ()
@property Float64 usedMemory;
@end

@implementation MemoryWaringData

- (BOOL) hasUsedMemory {
  return !!hasUsedMemory_;
}
- (void) setHasUsedMemory:(BOOL) value {
  hasUsedMemory_ = !!value;
}
@synthesize usedMemory;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.usedMemory = 0;
  }
  return self;
}
static MemoryWaringData* defaultMemoryWaringDataInstance = nil;
+ (void) initialize {
  if (self == [MemoryWaringData class]) {
    defaultMemoryWaringDataInstance = [[MemoryWaringData alloc] init];
  }
}
+ (MemoryWaringData*) defaultInstance {
  return defaultMemoryWaringDataInstance;
}
- (MemoryWaringData*) defaultInstance {
  return defaultMemoryWaringDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUsedMemory) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasUsedMemory) {
    [output writeDouble:1 value:self.usedMemory];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUsedMemory) {
    size += computeDoubleSize(1, self.usedMemory);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MemoryWaringData*) parseFromData:(NSData*) data {
  return (MemoryWaringData*)[[[MemoryWaringData builder] mergeFromData:data] build];
}
+ (MemoryWaringData*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MemoryWaringData*)[[[MemoryWaringData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MemoryWaringData*) parseFromInputStream:(NSInputStream*) input {
  return (MemoryWaringData*)[[[MemoryWaringData builder] mergeFromInputStream:input] build];
}
+ (MemoryWaringData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MemoryWaringData*)[[[MemoryWaringData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MemoryWaringData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (MemoryWaringData*)[[[MemoryWaringData builder] mergeFromCodedInputStream:input] build];
}
+ (MemoryWaringData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MemoryWaringData*)[[[MemoryWaringData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MemoryWaringData_Builder*) builder {
  return [[[MemoryWaringData_Builder alloc] init] autorelease];
}
+ (MemoryWaringData_Builder*) builderWithPrototype:(MemoryWaringData*) prototype {
  return [[MemoryWaringData builder] mergeFrom:prototype];
}
- (MemoryWaringData_Builder*) builder {
  return [MemoryWaringData builder];
}
@end

@interface MemoryWaringData_Builder()
@property (retain) MemoryWaringData* result;
@end

@implementation MemoryWaringData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MemoryWaringData alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (MemoryWaringData_Builder*) clear {
  self.result = [[[MemoryWaringData alloc] init] autorelease];
  return self;
}
- (MemoryWaringData_Builder*) clone {
  return [MemoryWaringData builderWithPrototype:result];
}
- (MemoryWaringData*) defaultInstance {
  return [MemoryWaringData defaultInstance];
}
- (MemoryWaringData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MemoryWaringData*) buildPartial {
  MemoryWaringData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MemoryWaringData_Builder*) mergeFrom:(MemoryWaringData*) other {
  if (other == [MemoryWaringData defaultInstance]) {
    return self;
  }
  if (other.hasUsedMemory) {
    [self setUsedMemory:other.usedMemory];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MemoryWaringData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (MemoryWaringData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setUsedMemory:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasUsedMemory {
  return result.hasUsedMemory;
}
- (Float64) usedMemory {
  return result.usedMemory;
}
- (MemoryWaringData_Builder*) setUsedMemory:(Float64) value {
  result.hasUsedMemory = YES;
  result.usedMemory = value;
  return self;
}
- (MemoryWaringData_Builder*) clearUsedMemory {
  result.hasUsedMemory = NO;
  result.usedMemory = 0;
  return self;
}
@end

@interface ThreadANR ()
@property int32_t theadId;
@property int64_t startAnr;
@property int32_t durationAnr;
@property (retain) NSString* threadDump;
@end

@implementation ThreadANR

- (BOOL) hasTheadId {
  return !!hasTheadId_;
}
- (void) setHasTheadId:(BOOL) value {
  hasTheadId_ = !!value;
}
@synthesize theadId;
- (BOOL) hasStartAnr {
  return !!hasStartAnr_;
}
- (void) setHasStartAnr:(BOOL) value {
  hasStartAnr_ = !!value;
}
@synthesize startAnr;
- (BOOL) hasDurationAnr {
  return !!hasDurationAnr_;
}
- (void) setHasDurationAnr:(BOOL) value {
  hasDurationAnr_ = !!value;
}
@synthesize durationAnr;
- (BOOL) hasThreadDump {
  return !!hasThreadDump_;
}
- (void) setHasThreadDump:(BOOL) value {
  hasThreadDump_ = !!value;
}
@synthesize threadDump;
- (void) dealloc {
  self.threadDump = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.theadId = 0;
    self.startAnr = 0L;
    self.durationAnr = 0;
    self.threadDump = @"";
  }
  return self;
}
static ThreadANR* defaultThreadANRInstance = nil;
+ (void) initialize {
  if (self == [ThreadANR class]) {
    defaultThreadANRInstance = [[ThreadANR alloc] init];
  }
}
+ (ThreadANR*) defaultInstance {
  return defaultThreadANRInstance;
}
- (ThreadANR*) defaultInstance {
  return defaultThreadANRInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTheadId) {
    return NO;
  }
  if (!self.hasStartAnr) {
    return NO;
  }
  if (!self.hasDurationAnr) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasTheadId) {
    [output writeInt32:1 value:self.theadId];
  }
  if (self.hasStartAnr) {
    [output writeInt64:2 value:self.startAnr];
  }
  if (self.hasDurationAnr) {
    [output writeInt32:3 value:self.durationAnr];
  }
  if (self.hasThreadDump) {
    [output writeString:4 value:self.threadDump];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTheadId) {
    size += computeInt32Size(1, self.theadId);
  }
  if (self.hasStartAnr) {
    size += computeInt64Size(2, self.startAnr);
  }
  if (self.hasDurationAnr) {
    size += computeInt32Size(3, self.durationAnr);
  }
  if (self.hasThreadDump) {
    size += computeStringSize(4, self.threadDump);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ThreadANR*) parseFromData:(NSData*) data {
  return (ThreadANR*)[[[ThreadANR builder] mergeFromData:data] build];
}
+ (ThreadANR*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (ThreadANR*)[[[ThreadANR builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ThreadANR*) parseFromInputStream:(NSInputStream*) input {
  return (ThreadANR*)[[[ThreadANR builder] mergeFromInputStream:input] build];
}
+ (ThreadANR*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (ThreadANR*)[[[ThreadANR builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ThreadANR*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (ThreadANR*)[[[ThreadANR builder] mergeFromCodedInputStream:input] build];
}
+ (ThreadANR*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (ThreadANR*)[[[ThreadANR builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ThreadANR_Builder*) builder {
  return [[[ThreadANR_Builder alloc] init] autorelease];
}
+ (ThreadANR_Builder*) builderWithPrototype:(ThreadANR*) prototype {
  return [[ThreadANR builder] mergeFrom:prototype];
}
- (ThreadANR_Builder*) builder {
  return [ThreadANR builder];
}
@end

@interface ThreadANR_Builder()
@property (retain) ThreadANR* result;
@end

@implementation ThreadANR_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ThreadANR alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (ThreadANR_Builder*) clear {
  self.result = [[[ThreadANR alloc] init] autorelease];
  return self;
}
- (ThreadANR_Builder*) clone {
  return [ThreadANR builderWithPrototype:result];
}
- (ThreadANR*) defaultInstance {
  return [ThreadANR defaultInstance];
}
- (ThreadANR*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ThreadANR*) buildPartial {
  ThreadANR* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ThreadANR_Builder*) mergeFrom:(ThreadANR*) other {
  if (other == [ThreadANR defaultInstance]) {
    return self;
  }
  if (other.hasTheadId) {
    [self setTheadId:other.theadId];
  }
  if (other.hasStartAnr) {
    [self setStartAnr:other.startAnr];
  }
  if (other.hasDurationAnr) {
    [self setDurationAnr:other.durationAnr];
  }
  if (other.hasThreadDump) {
    [self setThreadDump:other.threadDump];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ThreadANR_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (ThreadANR_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTheadId:[input readInt32]];
        break;
      }
      case 16: {
        [self setStartAnr:[input readInt64]];
        break;
      }
      case 24: {
        [self setDurationAnr:[input readInt32]];
        break;
      }
      case 34: {
        [self setThreadDump:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTheadId {
  return result.hasTheadId;
}
- (int32_t) theadId {
  return result.theadId;
}
- (ThreadANR_Builder*) setTheadId:(int32_t) value {
  result.hasTheadId = YES;
  result.theadId = value;
  return self;
}
- (ThreadANR_Builder*) clearTheadId {
  result.hasTheadId = NO;
  result.theadId = 0;
  return self;
}
- (BOOL) hasStartAnr {
  return result.hasStartAnr;
}
- (int64_t) startAnr {
  return result.startAnr;
}
- (ThreadANR_Builder*) setStartAnr:(int64_t) value {
  result.hasStartAnr = YES;
  result.startAnr = value;
  return self;
}
- (ThreadANR_Builder*) clearStartAnr {
  result.hasStartAnr = NO;
  result.startAnr = 0L;
  return self;
}
- (BOOL) hasDurationAnr {
  return result.hasDurationAnr;
}
- (int32_t) durationAnr {
  return result.durationAnr;
}
- (ThreadANR_Builder*) setDurationAnr:(int32_t) value {
  result.hasDurationAnr = YES;
  result.durationAnr = value;
  return self;
}
- (ThreadANR_Builder*) clearDurationAnr {
  result.hasDurationAnr = NO;
  result.durationAnr = 0;
  return self;
}
- (BOOL) hasThreadDump {
  return result.hasThreadDump;
}
- (NSString*) threadDump {
  return result.threadDump;
}
- (ThreadANR_Builder*) setThreadDump:(NSString*) value {
  result.hasThreadDump = YES;
  result.threadDump = value;
  return self;
}
- (ThreadANR_Builder*) clearThreadDump {
  result.hasThreadDump = NO;
  result.threadDump = @"";
  return self;
}
@end

@interface MetricData ()
@property Float32 fps;
@property Float32 cpu;
@property int32_t startBattery;
@property int32_t currentBattery;
@property MetricType metricType;
@property (retain) MetricData_MetricMemoryData* memory;
@property (retain) NSString* metricName;
@property int32_t time;
@end

@implementation MetricData

- (BOOL) hasFps {
  return !!hasFps_;
}
- (void) setHasFps:(BOOL) value {
  hasFps_ = !!value;
}
@synthesize fps;
- (BOOL) hasCpu {
  return !!hasCpu_;
}
- (void) setHasCpu:(BOOL) value {
  hasCpu_ = !!value;
}
@synthesize cpu;
- (BOOL) hasStartBattery {
  return !!hasStartBattery_;
}
- (void) setHasStartBattery:(BOOL) value {
  hasStartBattery_ = !!value;
}
@synthesize startBattery;
- (BOOL) hasCurrentBattery {
  return !!hasCurrentBattery_;
}
- (void) setHasCurrentBattery:(BOOL) value {
  hasCurrentBattery_ = !!value;
}
@synthesize currentBattery;
- (BOOL) hasMetricType {
  return !!hasMetricType_;
}
- (void) setHasMetricType:(BOOL) value {
  hasMetricType_ = !!value;
}
@synthesize metricType;
- (BOOL) hasMemory {
  return !!hasMemory_;
}
- (void) setHasMemory:(BOOL) value {
  hasMemory_ = !!value;
}
@synthesize memory;
- (BOOL) hasMetricName {
  return !!hasMetricName_;
}
- (void) setHasMetricName:(BOOL) value {
  hasMetricName_ = !!value;
}
@synthesize metricName;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (void) dealloc {
  self.memory = nil;
  self.metricName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.fps = 0;
    self.cpu = 0;
    self.startBattery = 0;
    self.currentBattery = 0;
    self.metricType = MetricTypeMetricNormal;
    self.memory = [MetricData_MetricMemoryData defaultInstance];
    self.metricName = @"";
    self.time = 0;
  }
  return self;
}
static MetricData* defaultMetricDataInstance = nil;
+ (void) initialize {
  if (self == [MetricData class]) {
    defaultMetricDataInstance = [[MetricData alloc] init];
  }
}
+ (MetricData*) defaultInstance {
  return defaultMetricDataInstance;
}
- (MetricData*) defaultInstance {
  return defaultMetricDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasMetricType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasFps) {
    [output writeFloat:1 value:self.fps];
  }
  if (self.hasCpu) {
    [output writeFloat:2 value:self.cpu];
  }
  if (self.hasStartBattery) {
    [output writeInt32:3 value:self.startBattery];
  }
  if (self.hasCurrentBattery) {
    [output writeInt32:4 value:self.currentBattery];
  }
  if (self.hasMetricType) {
    [output writeEnum:5 value:self.metricType];
  }
  if (self.hasMemory) {
    [output writeMessage:6 value:self.memory];
  }
  if (self.hasMetricName) {
    [output writeString:7 value:self.metricName];
  }
  if (self.hasTime) {
    [output writeInt32:8 value:self.time];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasFps) {
    size += computeFloatSize(1, self.fps);
  }
  if (self.hasCpu) {
    size += computeFloatSize(2, self.cpu);
  }
  if (self.hasStartBattery) {
    size += computeInt32Size(3, self.startBattery);
  }
  if (self.hasCurrentBattery) {
    size += computeInt32Size(4, self.currentBattery);
  }
  if (self.hasMetricType) {
    size += computeEnumSize(5, self.metricType);
  }
  if (self.hasMemory) {
    size += computeMessageSize(6, self.memory);
  }
  if (self.hasMetricName) {
    size += computeStringSize(7, self.metricName);
  }
  if (self.hasTime) {
    size += computeInt32Size(8, self.time);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MetricData*) parseFromData:(NSData*) data {
  return (MetricData*)[[[MetricData builder] mergeFromData:data] build];
}
+ (MetricData*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MetricData*)[[[MetricData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MetricData*) parseFromInputStream:(NSInputStream*) input {
  return (MetricData*)[[[MetricData builder] mergeFromInputStream:input] build];
}
+ (MetricData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MetricData*)[[[MetricData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MetricData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (MetricData*)[[[MetricData builder] mergeFromCodedInputStream:input] build];
}
+ (MetricData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MetricData*)[[[MetricData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MetricData_Builder*) builder {
  return [[[MetricData_Builder alloc] init] autorelease];
}
+ (MetricData_Builder*) builderWithPrototype:(MetricData*) prototype {
  return [[MetricData builder] mergeFrom:prototype];
}
- (MetricData_Builder*) builder {
  return [MetricData builder];
}
@end

@interface MetricData_MetricMemoryData ()
@property Float32 vss;
@property Float32 uss;
@property Float32 pss;
@property Float32 rss;
@property Float32 total;
@property Float32 free;
@end

@implementation MetricData_MetricMemoryData

- (BOOL) hasVss {
  return !!hasVss_;
}
- (void) setHasVss:(BOOL) value {
  hasVss_ = !!value;
}
@synthesize vss;
- (BOOL) hasUss {
  return !!hasUss_;
}
- (void) setHasUss:(BOOL) value {
  hasUss_ = !!value;
}
@synthesize uss;
- (BOOL) hasPss {
  return !!hasPss_;
}
- (void) setHasPss:(BOOL) value {
  hasPss_ = !!value;
}
@synthesize pss;
- (BOOL) hasRss {
  return !!hasRss_;
}
- (void) setHasRss:(BOOL) value {
  hasRss_ = !!value;
}
@synthesize rss;
- (BOOL) hasTotal {
  return !!hasTotal_;
}
- (void) setHasTotal:(BOOL) value {
  hasTotal_ = !!value;
}
@synthesize total;
- (BOOL) hasFree {
  return !!hasFree_;
}
- (void) setHasFree:(BOOL) value {
  hasFree_ = !!value;
}
@synthesize free;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.vss = 0;
    self.uss = 0;
    self.pss = 0;
    self.rss = 0;
    self.total = 0;
    self.free = 0;
  }
  return self;
}
static MetricData_MetricMemoryData* defaultMetricData_MetricMemoryDataInstance = nil;
+ (void) initialize {
  if (self == [MetricData_MetricMemoryData class]) {
    defaultMetricData_MetricMemoryDataInstance = [[MetricData_MetricMemoryData alloc] init];
  }
}
+ (MetricData_MetricMemoryData*) defaultInstance {
  return defaultMetricData_MetricMemoryDataInstance;
}
- (MetricData_MetricMemoryData*) defaultInstance {
  return defaultMetricData_MetricMemoryDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasVss) {
    [output writeFloat:1 value:self.vss];
  }
  if (self.hasUss) {
    [output writeFloat:2 value:self.uss];
  }
  if (self.hasPss) {
    [output writeFloat:3 value:self.pss];
  }
  if (self.hasRss) {
    [output writeFloat:4 value:self.rss];
  }
  if (self.hasTotal) {
    [output writeFloat:5 value:self.total];
  }
  if (self.hasFree) {
    [output writeFloat:6 value:self.free];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasVss) {
    size += computeFloatSize(1, self.vss);
  }
  if (self.hasUss) {
    size += computeFloatSize(2, self.uss);
  }
  if (self.hasPss) {
    size += computeFloatSize(3, self.pss);
  }
  if (self.hasRss) {
    size += computeFloatSize(4, self.rss);
  }
  if (self.hasTotal) {
    size += computeFloatSize(5, self.total);
  }
  if (self.hasFree) {
    size += computeFloatSize(6, self.free);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MetricData_MetricMemoryData*) parseFromData:(NSData*) data {
  return (MetricData_MetricMemoryData*)[[[MetricData_MetricMemoryData builder] mergeFromData:data] build];
}
+ (MetricData_MetricMemoryData*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MetricData_MetricMemoryData*)[[[MetricData_MetricMemoryData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MetricData_MetricMemoryData*) parseFromInputStream:(NSInputStream*) input {
  return (MetricData_MetricMemoryData*)[[[MetricData_MetricMemoryData builder] mergeFromInputStream:input] build];
}
+ (MetricData_MetricMemoryData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MetricData_MetricMemoryData*)[[[MetricData_MetricMemoryData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MetricData_MetricMemoryData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (MetricData_MetricMemoryData*)[[[MetricData_MetricMemoryData builder] mergeFromCodedInputStream:input] build];
}
+ (MetricData_MetricMemoryData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (MetricData_MetricMemoryData*)[[[MetricData_MetricMemoryData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MetricData_MetricMemoryData_Builder*) builder {
  return [[[MetricData_MetricMemoryData_Builder alloc] init] autorelease];
}
+ (MetricData_MetricMemoryData_Builder*) builderWithPrototype:(MetricData_MetricMemoryData*) prototype {
  return [[MetricData_MetricMemoryData builder] mergeFrom:prototype];
}
- (MetricData_MetricMemoryData_Builder*) builder {
  return [MetricData_MetricMemoryData builder];
}
@end

@interface MetricData_MetricMemoryData_Builder()
@property (retain) MetricData_MetricMemoryData* result;
@end

@implementation MetricData_MetricMemoryData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MetricData_MetricMemoryData alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (MetricData_MetricMemoryData_Builder*) clear {
  self.result = [[[MetricData_MetricMemoryData alloc] init] autorelease];
  return self;
}
- (MetricData_MetricMemoryData_Builder*) clone {
  return [MetricData_MetricMemoryData builderWithPrototype:result];
}
- (MetricData_MetricMemoryData*) defaultInstance {
  return [MetricData_MetricMemoryData defaultInstance];
}
- (MetricData_MetricMemoryData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MetricData_MetricMemoryData*) buildPartial {
  MetricData_MetricMemoryData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MetricData_MetricMemoryData_Builder*) mergeFrom:(MetricData_MetricMemoryData*) other {
  if (other == [MetricData_MetricMemoryData defaultInstance]) {
    return self;
  }
  if (other.hasVss) {
    [self setVss:other.vss];
  }
  if (other.hasUss) {
    [self setUss:other.uss];
  }
  if (other.hasPss) {
    [self setPss:other.pss];
  }
  if (other.hasRss) {
    [self setRss:other.rss];
  }
  if (other.hasTotal) {
    [self setTotal:other.total];
  }
  if (other.hasFree) {
    [self setFree:other.free];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MetricData_MetricMemoryData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (MetricData_MetricMemoryData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setVss:[input readFloat]];
        break;
      }
      case 21: {
        [self setUss:[input readFloat]];
        break;
      }
      case 29: {
        [self setPss:[input readFloat]];
        break;
      }
      case 37: {
        [self setRss:[input readFloat]];
        break;
      }
      case 45: {
        [self setTotal:[input readFloat]];
        break;
      }
      case 53: {
        [self setFree:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasVss {
  return result.hasVss;
}
- (Float32) vss {
  return result.vss;
}
- (MetricData_MetricMemoryData_Builder*) setVss:(Float32) value {
  result.hasVss = YES;
  result.vss = value;
  return self;
}
- (MetricData_MetricMemoryData_Builder*) clearVss {
  result.hasVss = NO;
  result.vss = 0;
  return self;
}
- (BOOL) hasUss {
  return result.hasUss;
}
- (Float32) uss {
  return result.uss;
}
- (MetricData_MetricMemoryData_Builder*) setUss:(Float32) value {
  result.hasUss = YES;
  result.uss = value;
  return self;
}
- (MetricData_MetricMemoryData_Builder*) clearUss {
  result.hasUss = NO;
  result.uss = 0;
  return self;
}
- (BOOL) hasPss {
  return result.hasPss;
}
- (Float32) pss {
  return result.pss;
}
- (MetricData_MetricMemoryData_Builder*) setPss:(Float32) value {
  result.hasPss = YES;
  result.pss = value;
  return self;
}
- (MetricData_MetricMemoryData_Builder*) clearPss {
  result.hasPss = NO;
  result.pss = 0;
  return self;
}
- (BOOL) hasRss {
  return result.hasRss;
}
- (Float32) rss {
  return result.rss;
}
- (MetricData_MetricMemoryData_Builder*) setRss:(Float32) value {
  result.hasRss = YES;
  result.rss = value;
  return self;
}
- (MetricData_MetricMemoryData_Builder*) clearRss {
  result.hasRss = NO;
  result.rss = 0;
  return self;
}
- (BOOL) hasTotal {
  return result.hasTotal;
}
- (Float32) total {
  return result.total;
}
- (MetricData_MetricMemoryData_Builder*) setTotal:(Float32) value {
  result.hasTotal = YES;
  result.total = value;
  return self;
}
- (MetricData_MetricMemoryData_Builder*) clearTotal {
  result.hasTotal = NO;
  result.total = 0;
  return self;
}
- (BOOL) hasFree {
  return result.hasFree;
}
- (Float32) free {
  return result.free;
}
- (MetricData_MetricMemoryData_Builder*) setFree:(Float32) value {
  result.hasFree = YES;
  result.free = value;
  return self;
}
- (MetricData_MetricMemoryData_Builder*) clearFree {
  result.hasFree = NO;
  result.free = 0;
  return self;
}
@end

@interface MetricData_Builder()
@property (retain) MetricData* result;
@end

@implementation MetricData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MetricData alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (MetricData_Builder*) clear {
  self.result = [[[MetricData alloc] init] autorelease];
  return self;
}
- (MetricData_Builder*) clone {
  return [MetricData builderWithPrototype:result];
}
- (MetricData*) defaultInstance {
  return [MetricData defaultInstance];
}
- (MetricData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MetricData*) buildPartial {
  MetricData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MetricData_Builder*) mergeFrom:(MetricData*) other {
  if (other == [MetricData defaultInstance]) {
    return self;
  }
  if (other.hasFps) {
    [self setFps:other.fps];
  }
  if (other.hasCpu) {
    [self setCpu:other.cpu];
  }
  if (other.hasStartBattery) {
    [self setStartBattery:other.startBattery];
  }
  if (other.hasCurrentBattery) {
    [self setCurrentBattery:other.currentBattery];
  }
  if (other.hasMetricType) {
    [self setMetricType:other.metricType];
  }
  if (other.hasMemory) {
    [self mergeMemory:other.memory];
  }
  if (other.hasMetricName) {
    [self setMetricName:other.metricName];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MetricData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (MetricData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setFps:[input readFloat]];
        break;
      }
      case 21: {
        [self setCpu:[input readFloat]];
        break;
      }
      case 24: {
        [self setStartBattery:[input readInt32]];
        break;
      }
      case 32: {
        [self setCurrentBattery:[input readInt32]];
        break;
      }
      case 40: {
        int32_t value = [input readEnum];
        if (MetricTypeIsValidValue(value)) {
          [self setMetricType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 50: {
        MetricData_MetricMemoryData_Builder* subBuilder = [MetricData_MetricMemoryData builder];
        if (self.hasMemory) {
          [subBuilder mergeFrom:self.memory];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMemory:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setMetricName:[input readString]];
        break;
      }
      case 64: {
        [self setTime:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasFps {
  return result.hasFps;
}
- (Float32) fps {
  return result.fps;
}
- (MetricData_Builder*) setFps:(Float32) value {
  result.hasFps = YES;
  result.fps = value;
  return self;
}
- (MetricData_Builder*) clearFps {
  result.hasFps = NO;
  result.fps = 0;
  return self;
}
- (BOOL) hasCpu {
  return result.hasCpu;
}
- (Float32) cpu {
  return result.cpu;
}
- (MetricData_Builder*) setCpu:(Float32) value {
  result.hasCpu = YES;
  result.cpu = value;
  return self;
}
- (MetricData_Builder*) clearCpu {
  result.hasCpu = NO;
  result.cpu = 0;
  return self;
}
- (BOOL) hasStartBattery {
  return result.hasStartBattery;
}
- (int32_t) startBattery {
  return result.startBattery;
}
- (MetricData_Builder*) setStartBattery:(int32_t) value {
  result.hasStartBattery = YES;
  result.startBattery = value;
  return self;
}
- (MetricData_Builder*) clearStartBattery {
  result.hasStartBattery = NO;
  result.startBattery = 0;
  return self;
}
- (BOOL) hasCurrentBattery {
  return result.hasCurrentBattery;
}
- (int32_t) currentBattery {
  return result.currentBattery;
}
- (MetricData_Builder*) setCurrentBattery:(int32_t) value {
  result.hasCurrentBattery = YES;
  result.currentBattery = value;
  return self;
}
- (MetricData_Builder*) clearCurrentBattery {
  result.hasCurrentBattery = NO;
  result.currentBattery = 0;
  return self;
}
- (BOOL) hasMetricType {
  return result.hasMetricType;
}
- (MetricType) metricType {
  return result.metricType;
}
- (MetricData_Builder*) setMetricType:(MetricType) value {
  result.hasMetricType = YES;
  result.metricType = value;
  return self;
}
- (MetricData_Builder*) clearMetricType {
  result.hasMetricType = NO;
  result.metricType = MetricTypeMetricNormal;
  return self;
}
- (BOOL) hasMemory {
  return result.hasMemory;
}
- (MetricData_MetricMemoryData*) memory {
  return result.memory;
}
- (MetricData_Builder*) setMemory:(MetricData_MetricMemoryData*) value {
  result.hasMemory = YES;
  result.memory = value;
  return self;
}
- (MetricData_Builder*) setMemoryBuilder:(MetricData_MetricMemoryData_Builder*) builderForValue {
  return [self setMemory:[builderForValue build]];
}
- (MetricData_Builder*) mergeMemory:(MetricData_MetricMemoryData*) value {
  if (result.hasMemory &&
      result.memory != [MetricData_MetricMemoryData defaultInstance]) {
    result.memory =
      [[[MetricData_MetricMemoryData builderWithPrototype:result.memory] mergeFrom:value] buildPartial];
  } else {
    result.memory = value;
  }
  result.hasMemory = YES;
  return self;
}
- (MetricData_Builder*) clearMemory {
  result.hasMemory = NO;
  result.memory = [MetricData_MetricMemoryData defaultInstance];
  return self;
}
- (BOOL) hasMetricName {
  return result.hasMetricName;
}
- (NSString*) metricName {
  return result.metricName;
}
- (MetricData_Builder*) setMetricName:(NSString*) value {
  result.hasMetricName = YES;
  result.metricName = value;
  return self;
}
- (MetricData_Builder*) clearMetricName {
  result.hasMetricName = NO;
  result.metricName = @"";
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (int32_t) time {
  return result.time;
}
- (MetricData_Builder*) setTime:(int32_t) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (MetricData_Builder*) clearTime {
  result.hasTime = NO;
  result.time = 0;
  return self;
}
@end

@interface BatteryData ()
@property int32_t startBattery;
@property (retain) NSMutableArray* mutableBatterysList;
@end

@implementation BatteryData

- (BOOL) hasStartBattery {
  return !!hasStartBattery_;
}
- (void) setHasStartBattery:(BOOL) value {
  hasStartBattery_ = !!value;
}
@synthesize startBattery;
@synthesize mutableBatterysList;
- (void) dealloc {
  self.mutableBatterysList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.startBattery = 0;
  }
  return self;
}
static BatteryData* defaultBatteryDataInstance = nil;
+ (void) initialize {
  if (self == [BatteryData class]) {
    defaultBatteryDataInstance = [[BatteryData alloc] init];
  }
}
+ (BatteryData*) defaultInstance {
  return defaultBatteryDataInstance;
}
- (BatteryData*) defaultInstance {
  return defaultBatteryDataInstance;
}
- (NSArray*) batterysList {
  return mutableBatterysList;
}
- (BatteryData_BatteryItemData*) batterysAtIndex:(int32_t) index {
  id value = [mutableBatterysList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasStartBattery) {
    return NO;
  }
  for (BatteryData_BatteryItemData* element in self.batterysList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasStartBattery) {
    [output writeInt32:1 value:self.startBattery];
  }
  for (BatteryData_BatteryItemData* element in self.batterysList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasStartBattery) {
    size += computeInt32Size(1, self.startBattery);
  }
  for (BatteryData_BatteryItemData* element in self.batterysList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BatteryData*) parseFromData:(NSData*) data {
  return (BatteryData*)[[[BatteryData builder] mergeFromData:data] build];
}
+ (BatteryData*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (BatteryData*)[[[BatteryData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BatteryData*) parseFromInputStream:(NSInputStream*) input {
  return (BatteryData*)[[[BatteryData builder] mergeFromInputStream:input] build];
}
+ (BatteryData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (BatteryData*)[[[BatteryData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BatteryData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (BatteryData*)[[[BatteryData builder] mergeFromCodedInputStream:input] build];
}
+ (BatteryData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (BatteryData*)[[[BatteryData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BatteryData_Builder*) builder {
  return [[[BatteryData_Builder alloc] init] autorelease];
}
+ (BatteryData_Builder*) builderWithPrototype:(BatteryData*) prototype {
  return [[BatteryData builder] mergeFrom:prototype];
}
- (BatteryData_Builder*) builder {
  return [BatteryData builder];
}
@end

@interface BatteryData_BatteryItemData ()
@property int32_t currentBattery;
@property int32_t timeSection;
@end

@implementation BatteryData_BatteryItemData

- (BOOL) hasCurrentBattery {
  return !!hasCurrentBattery_;
}
- (void) setHasCurrentBattery:(BOOL) value {
  hasCurrentBattery_ = !!value;
}
@synthesize currentBattery;
- (BOOL) hasTimeSection {
  return !!hasTimeSection_;
}
- (void) setHasTimeSection:(BOOL) value {
  hasTimeSection_ = !!value;
}
@synthesize timeSection;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.currentBattery = 0;
    self.timeSection = 0;
  }
  return self;
}
static BatteryData_BatteryItemData* defaultBatteryData_BatteryItemDataInstance = nil;
+ (void) initialize {
  if (self == [BatteryData_BatteryItemData class]) {
    defaultBatteryData_BatteryItemDataInstance = [[BatteryData_BatteryItemData alloc] init];
  }
}
+ (BatteryData_BatteryItemData*) defaultInstance {
  return defaultBatteryData_BatteryItemDataInstance;
}
- (BatteryData_BatteryItemData*) defaultInstance {
  return defaultBatteryData_BatteryItemDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCurrentBattery) {
    return NO;
  }
  if (!self.hasTimeSection) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasCurrentBattery) {
    [output writeInt32:1 value:self.currentBattery];
  }
  if (self.hasTimeSection) {
    [output writeInt32:2 value:self.timeSection];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCurrentBattery) {
    size += computeInt32Size(1, self.currentBattery);
  }
  if (self.hasTimeSection) {
    size += computeInt32Size(2, self.timeSection);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BatteryData_BatteryItemData*) parseFromData:(NSData*) data {
  return (BatteryData_BatteryItemData*)[[[BatteryData_BatteryItemData builder] mergeFromData:data] build];
}
+ (BatteryData_BatteryItemData*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (BatteryData_BatteryItemData*)[[[BatteryData_BatteryItemData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BatteryData_BatteryItemData*) parseFromInputStream:(NSInputStream*) input {
  return (BatteryData_BatteryItemData*)[[[BatteryData_BatteryItemData builder] mergeFromInputStream:input] build];
}
+ (BatteryData_BatteryItemData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (BatteryData_BatteryItemData*)[[[BatteryData_BatteryItemData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BatteryData_BatteryItemData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (BatteryData_BatteryItemData*)[[[BatteryData_BatteryItemData builder] mergeFromCodedInputStream:input] build];
}
+ (BatteryData_BatteryItemData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (BatteryData_BatteryItemData*)[[[BatteryData_BatteryItemData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BatteryData_BatteryItemData_Builder*) builder {
  return [[[BatteryData_BatteryItemData_Builder alloc] init] autorelease];
}
+ (BatteryData_BatteryItemData_Builder*) builderWithPrototype:(BatteryData_BatteryItemData*) prototype {
  return [[BatteryData_BatteryItemData builder] mergeFrom:prototype];
}
- (BatteryData_BatteryItemData_Builder*) builder {
  return [BatteryData_BatteryItemData builder];
}
@end

@interface BatteryData_BatteryItemData_Builder()
@property (retain) BatteryData_BatteryItemData* result;
@end

@implementation BatteryData_BatteryItemData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BatteryData_BatteryItemData alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (BatteryData_BatteryItemData_Builder*) clear {
  self.result = [[[BatteryData_BatteryItemData alloc] init] autorelease];
  return self;
}
- (BatteryData_BatteryItemData_Builder*) clone {
  return [BatteryData_BatteryItemData builderWithPrototype:result];
}
- (BatteryData_BatteryItemData*) defaultInstance {
  return [BatteryData_BatteryItemData defaultInstance];
}
- (BatteryData_BatteryItemData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BatteryData_BatteryItemData*) buildPartial {
  BatteryData_BatteryItemData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BatteryData_BatteryItemData_Builder*) mergeFrom:(BatteryData_BatteryItemData*) other {
  if (other == [BatteryData_BatteryItemData defaultInstance]) {
    return self;
  }
  if (other.hasCurrentBattery) {
    [self setCurrentBattery:other.currentBattery];
  }
  if (other.hasTimeSection) {
    [self setTimeSection:other.timeSection];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BatteryData_BatteryItemData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (BatteryData_BatteryItemData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCurrentBattery:[input readInt32]];
        break;
      }
      case 16: {
        [self setTimeSection:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCurrentBattery {
  return result.hasCurrentBattery;
}
- (int32_t) currentBattery {
  return result.currentBattery;
}
- (BatteryData_BatteryItemData_Builder*) setCurrentBattery:(int32_t) value {
  result.hasCurrentBattery = YES;
  result.currentBattery = value;
  return self;
}
- (BatteryData_BatteryItemData_Builder*) clearCurrentBattery {
  result.hasCurrentBattery = NO;
  result.currentBattery = 0;
  return self;
}
- (BOOL) hasTimeSection {
  return result.hasTimeSection;
}
- (int32_t) timeSection {
  return result.timeSection;
}
- (BatteryData_BatteryItemData_Builder*) setTimeSection:(int32_t) value {
  result.hasTimeSection = YES;
  result.timeSection = value;
  return self;
}
- (BatteryData_BatteryItemData_Builder*) clearTimeSection {
  result.hasTimeSection = NO;
  result.timeSection = 0;
  return self;
}
@end

@interface BatteryData_Builder()
@property (retain) BatteryData* result;
@end

@implementation BatteryData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BatteryData alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (BatteryData_Builder*) clear {
  self.result = [[[BatteryData alloc] init] autorelease];
  return self;
}
- (BatteryData_Builder*) clone {
  return [BatteryData builderWithPrototype:result];
}
- (BatteryData*) defaultInstance {
  return [BatteryData defaultInstance];
}
- (BatteryData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BatteryData*) buildPartial {
  BatteryData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BatteryData_Builder*) mergeFrom:(BatteryData*) other {
  if (other == [BatteryData defaultInstance]) {
    return self;
  }
  if (other.hasStartBattery) {
    [self setStartBattery:other.startBattery];
  }
  if (other.mutableBatterysList.count > 0) {
    if (result.mutableBatterysList == nil) {
      result.mutableBatterysList = [NSMutableArray array];
    }
    [result.mutableBatterysList addObjectsFromArray:other.mutableBatterysList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BatteryData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (BatteryData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setStartBattery:[input readInt32]];
        break;
      }
      case 18: {
        BatteryData_BatteryItemData_Builder* subBuilder = [BatteryData_BatteryItemData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBatterys:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasStartBattery {
  return result.hasStartBattery;
}
- (int32_t) startBattery {
  return result.startBattery;
}
- (BatteryData_Builder*) setStartBattery:(int32_t) value {
  result.hasStartBattery = YES;
  result.startBattery = value;
  return self;
}
- (BatteryData_Builder*) clearStartBattery {
  result.hasStartBattery = NO;
  result.startBattery = 0;
  return self;
}
- (NSArray*) batterysList {
  if (result.mutableBatterysList == nil) { return [NSArray array]; }
  return result.mutableBatterysList;
}
- (BatteryData_BatteryItemData*) batterysAtIndex:(int32_t) index {
  return [result batterysAtIndex:index];
}
- (BatteryData_Builder*) replaceBatterysAtIndex:(int32_t) index with:(BatteryData_BatteryItemData*) value {
  [result.mutableBatterysList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (BatteryData_Builder*) addAllBatterys:(NSArray*) values {
  if (result.mutableBatterysList == nil) {
    result.mutableBatterysList = [NSMutableArray array];
  }
  [result.mutableBatterysList addObjectsFromArray:values];
  return self;
}
- (BatteryData_Builder*) clearBatterysList {
  result.mutableBatterysList = nil;
  return self;
}
- (BatteryData_Builder*) addBatterys:(BatteryData_BatteryItemData*) value {
  if (result.mutableBatterysList == nil) {
    result.mutableBatterysList = [NSMutableArray array];
  }
  [result.mutableBatterysList addObject:value];
  return self;
}
@end

@interface FpsData ()
@property int32_t fps;
@property int32_t timeSection;
@property (retain) NSString* note;
@property (retain) NSData* snapShot;
@end

@implementation FpsData

- (BOOL) hasFps {
  return !!hasFps_;
}
- (void) setHasFps:(BOOL) value {
  hasFps_ = !!value;
}
@synthesize fps;
- (BOOL) hasTimeSection {
  return !!hasTimeSection_;
}
- (void) setHasTimeSection:(BOOL) value {
  hasTimeSection_ = !!value;
}
@synthesize timeSection;
- (BOOL) hasNote {
  return !!hasNote_;
}
- (void) setHasNote:(BOOL) value {
  hasNote_ = !!value;
}
@synthesize note;
- (BOOL) hasSnapShot {
  return !!hasSnapShot_;
}
- (void) setHasSnapShot:(BOOL) value {
  hasSnapShot_ = !!value;
}
@synthesize snapShot;
- (void) dealloc {
  self.note = nil;
  self.snapShot = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.fps = 0;
    self.timeSection = 0;
    self.note = @"";
    self.snapShot = [NSData data];
  }
  return self;
}
static FpsData* defaultFpsDataInstance = nil;
+ (void) initialize {
  if (self == [FpsData class]) {
    defaultFpsDataInstance = [[FpsData alloc] init];
  }
}
+ (FpsData*) defaultInstance {
  return defaultFpsDataInstance;
}
- (FpsData*) defaultInstance {
  return defaultFpsDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFps) {
    return NO;
  }
  if (!self.hasTimeSection) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(BatPBCodedOutputStream*) output {
  if (self.hasFps) {
    [output writeInt32:1 value:self.fps];
  }
  if (self.hasTimeSection) {
    [output writeInt32:2 value:self.timeSection];
  }
  if (self.hasNote) {
    [output writeString:3 value:self.note];
  }
  if (self.hasSnapShot) {
    [output writeData:4 value:self.snapShot];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasFps) {
    size += computeInt32Size(1, self.fps);
  }
  if (self.hasTimeSection) {
    size += computeInt32Size(2, self.timeSection);
  }
  if (self.hasNote) {
    size += computeStringSize(3, self.note);
  }
  if (self.hasSnapShot) {
    size += computeDataSize(4, self.snapShot);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FpsData*) parseFromData:(NSData*) data {
  return (FpsData*)[[[FpsData builder] mergeFromData:data] build];
}
+ (FpsData*) parseFromData:(NSData*) data extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (FpsData*)[[[FpsData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FpsData*) parseFromInputStream:(NSInputStream*) input {
  return (FpsData*)[[[FpsData builder] mergeFromInputStream:input] build];
}
+ (FpsData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (FpsData*)[[[FpsData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FpsData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input {
  return (FpsData*)[[[FpsData builder] mergeFromCodedInputStream:input] build];
}
+ (FpsData*) parseFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  return (FpsData*)[[[FpsData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FpsData_Builder*) builder {
  return [[[FpsData_Builder alloc] init] autorelease];
}
+ (FpsData_Builder*) builderWithPrototype:(FpsData*) prototype {
  return [[FpsData builder] mergeFrom:prototype];
}
- (FpsData_Builder*) builder {
  return [FpsData builder];
}
@end

@interface FpsData_Builder()
@property (retain) FpsData* result;
@end

@implementation FpsData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FpsData alloc] init] autorelease];
  }
  return self;
}
- (BatPBGeneratedMessage*) internalGetResult {
  return result;
}
- (FpsData_Builder*) clear {
  self.result = [[[FpsData alloc] init] autorelease];
  return self;
}
- (FpsData_Builder*) clone {
  return [FpsData builderWithPrototype:result];
}
- (FpsData*) defaultInstance {
  return [FpsData defaultInstance];
}
- (FpsData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FpsData*) buildPartial {
  FpsData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FpsData_Builder*) mergeFrom:(FpsData*) other {
  if (other == [FpsData defaultInstance]) {
    return self;
  }
  if (other.hasFps) {
    [self setFps:other.fps];
  }
  if (other.hasTimeSection) {
    [self setTimeSection:other.timeSection];
  }
  if (other.hasNote) {
    [self setNote:other.note];
  }
  if (other.hasSnapShot) {
    [self setSnapShot:other.snapShot];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FpsData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[BatPBExtensionRegistry emptyRegistry]];
}
- (FpsData_Builder*) mergeFromCodedInputStream:(BatPBCodedInputStream*) input extensionRegistry:(BatPBExtensionRegistry*) extensionRegistry {
  BatPBUnknownFieldSet_Builder* unknownFields = [BatPBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFps:[input readInt32]];
        break;
      }
      case 16: {
        [self setTimeSection:[input readInt32]];
        break;
      }
      case 26: {
        [self setNote:[input readString]];
        break;
      }
      case 34: {
        [self setSnapShot:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasFps {
  return result.hasFps;
}
- (int32_t) fps {
  return result.fps;
}
- (FpsData_Builder*) setFps:(int32_t) value {
  result.hasFps = YES;
  result.fps = value;
  return self;
}
- (FpsData_Builder*) clearFps {
  result.hasFps = NO;
  result.fps = 0;
  return self;
}
- (BOOL) hasTimeSection {
  return result.hasTimeSection;
}
- (int32_t) timeSection {
  return result.timeSection;
}
- (FpsData_Builder*) setTimeSection:(int32_t) value {
  result.hasTimeSection = YES;
  result.timeSection = value;
  return self;
}
- (FpsData_Builder*) clearTimeSection {
  result.hasTimeSection = NO;
  result.timeSection = 0;
  return self;
}
- (BOOL) hasNote {
  return result.hasNote;
}
- (NSString*) note {
  return result.note;
}
- (FpsData_Builder*) setNote:(NSString*) value {
  result.hasNote = YES;
  result.note = value;
  return self;
}
- (FpsData_Builder*) clearNote {
  result.hasNote = NO;
  result.note = @"";
  return self;
}
- (BOOL) hasSnapShot {
  return result.hasSnapShot;
}
- (NSData*) snapShot {
  return result.snapShot;
}
- (FpsData_Builder*) setSnapShot:(NSData*) value {
  result.hasSnapShot = YES;
  result.snapShot = value;
  return self;
}
- (FpsData_Builder*) clearSnapShot {
  result.hasSnapShot = NO;
  result.snapShot = [NSData data];
  return self;
}
@end

